trialsets    <- settings[['trialsets']]
baselines    <- settings[['baselines']]
schedules    <- settings[['schedules']]
FUN          <- settings[['FUN']]
useOptimx    <- settings[['useOptimx']]
styles <- getStyles()
plot(-1000,-1000,
xlab='trials completed in rotated phase',ylab='percentage of saturation',
main='modeled process speeds',
xlim=c(0,20),ylim=c(0,1.1),
bty='n',ax=F)
TIME <- seq(0,160,.1)
xcoords <- TIME
groupcolors <- c(styles$passive$solid,
styles$terminal$solid,
styles$exposure$solid,
"black",
"grey")
names(groupsignals)[1]
groupname<-names(groupsignals)[1]
groupsignals[[groupname]]
signalname<-groupsignals[[groupname]][1]
leadingzero <- FALSE
if (signalname %in% c('localization', 'nocursors')) {
leadingzero <- TRUE
}
# determine length of baseline period and schedule-direction:
BL <- baselines[[groupname]][[signalname]]
schedulesign <- schedules[[groupname]][[signalname]]
# get the part of the data we want to fit:
indices <- trialsets[[trialset]] + BL
indices<- c(65,165)
indices<- c(65:165)
160+64
indices<- c(65:224)
# schedule is a vector of values -1 and length the same as the signal:
schedulelength <- length(indices)
if (leadingzero) {schedulelength <- schedulelength + 1}
schedule <- rep(-1, schedulelength)
processes <- list()
roc = "lambda"
par <- c('lambda'=df[which(df$group == groupname & df$signal == signalname),roc], 'N0'=df[which(df$group == groupname & df$signal == signalname),'N0'])
par['scale'] <- df$N0_025[which(df$group == groupname & df$signal == signalname)]
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel_terminal.R')
dfit <- asymptoticDecayModel(par,schedule)$output
df <- read.csv('data/asymptoticDecayParameterCIs.csv', stringsAsFactors = F)
View(df)
par <- c('lambda'=df[which(df$group == groupname & df$signal == signalname),roc], 'N0'=df[which(df$group == groupname & df$signal == signalname),'N0'])
par['scale'] <- df$N0_025[which(df$group == groupname & df$signal == signalname)]
dfit <- asymptoticDecayModel(par,schedule)$output
smspl <- smooth.spline(x=c(0:(length(schedule)-1)), y=dfit, spar=NULL)
process <- predict(smspl,TIME)$y
process <- (process) / (par['scale'])
processes[[roc]] <- process
upr <- processes[['lambda_975']]
View(processes)
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel_terminal.R')
df <- read.csv('data/asymptoticDecayParameterCIs.csv', stringsAsFactors = F)
settings <- asymptoticDecaySettings()
groupsignals <- list(
'passive'       = c('reaches','localization'),
'terminal'   = c('reaches','localization'),
'exposure'         = c('localization')
)
groupsignals
trialsets    <- settings[['trialsets']]
baselines    <- settings[['baselines']]
schedules    <- settings[['schedules']]
FUN          <- settings[['FUN']]
useOptimx    <- settings[['useOptimx']]
styles <- getStyles()
styles
plot(-1000,-1000,
xlab='trials completed in rotated phase',ylab='percentage of saturation',
main='modeled process speeds',
xlim=c(0,20),ylim=c(0,1.1),
bty='n',ax=F)
TIME <- seq(0,160,.1)
xcoords <- TIME
groupsignals
groupsignals[1]
names(groupsignals)
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel_terminal.R')
plotSaturation()
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel_terminal.R')
plotSaturation()
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel_terminal.R')
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel_terminal.R')
plotSaturation()
source('R/shared.R')
source('R/Figures.R')
source('R/Figures.R')
source('R/Analysis.R')
source('R/Analysis.R')
source('R/asymptoticDecayModel_terminal.R')
source('R/Repeated_Measures_Combine.R')
loadalldata()
loadalldata()
loadcolors()
Rebounds<- PrepANOVARebounds(passive_reaches,terminal_reaches,exposure_reaches)
t.test(Rebounds$EC_Late[Rebounds$Experiment == 'Passive'], paired = FALSE)
t.test(Rebounds$EC_Late[Rebounds$Experiment == 'Exposure'], paired = FALSE)
t.test(Rebounds$EC_Late[Rebounds$Experiment == 'Terminal'], paired = FALSE)
library(effsize)
cohens.d(Rebounds$EC_Late[Rebounds$Experiment == 'Passive'], paired = FALSE)
cohen.d(Rebounds$EC_Late[Rebounds$Experiment == 'Passive'], paired = FALSE)
cohen.d(Rebounds$EC_Late[Rebounds$Experiment == 'Passive'])
cohen.d(d=Rebounds$EC_Late[Rebounds$Experiment == 'Passive'])
cohen.d(d=Rebounds$EC_Late[Rebounds$Experiment == 'Passive'], na.rm=TRUE)
cohen.d(d=Rebounds$EC_Late[Rebounds$Experiment == 'Passive'],f=NA, na.rm=TRUE)
t.test(Rebounds$EC_Late[Rebounds$Experiment == 'Passive'], paired = FALSE)
cohen.d(d=Rebounds$EC_Late[Rebounds$Experiment == 'Passive'],f=NA, na.rm=TRUE)
t.test(Rebounds$EC_Late[Rebounds$Experiment == 'Terminal'], paired = FALSE)
cohen.d(d=Rebounds$EC_Late[Rebounds$Experiment == 'Terminal'],f=NA, na.rm=TRUE)
t.test(Rebounds$EC_Late[Rebounds$Experiment == 'Exposure'], paired = FALSE)
cohen.d(d=Rebounds$EC_Late[Rebounds$Experiment == 'Exposure'],f=NA, na.rm=TRUE)
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel.R')
plotSaturation()
source('R/shared.R')
source('R/Figures.R')
source('R/Analysis.R')
source('R/asymptoticDecayModel_terminal.R')
source('R/Repeated_Measures_Combine.R')
loadalldata()
loadcolors()
RegressionPLot()
PRrm <- TCombine(passive_reaches)
PRRm <- PRrm$EC_Late * -1
PPec <- TCombine(passive_localization)
PPec <- PPec$EC_Late
plot(
PPec ~ PRRm,
col = colorPA,
xlab = 'Reaches',
ylab = 'Localization',
main = 'Localization ~ Reaches During Error Clamp',
xlim = c(-30, 30),
ylim = c(-20, 20),
axes = FALSE, asp = 1, cex.lab = 1.25
)
axis(2,
at = c( -20,-10, 0, 10, 20),
cex.axis = 1.2)
axis(1,
at = c(-30,-20,- 10, 0, 10, 20, 30),
cex.axis = 1.2)
lines(x = c(-30:30), y = rep(0, times = length(-30:30)), lty = 3)
abline(v = c(0), lty = 3)
lm<-plotRegressionWithCI(PRRm, PPec, colors = c(colorPA_trans, colorPA))
summary(lm)
Arm <- TCombine(terminal_reaches)
ARm <- Arm$EC_Late * -1
APec <- TCombine(terminal_localization)
APec <- APec$EC_Late
points(APec ~ ARm, col = colorT)
tm<-plotRegressionWithCI(ARm, APec, colors = c(colorT_trans, colorT))
tr<-summary(tm)$r.squared
print(summary(tm)$coefficients[2,4])
summary(lm)
summary(tm)
PARRm <- as.numeric(unlist(colMeans(exposure_reaches[33:48,2:33], na.rm = TRUE)))
PAPec <- TCombine(exposure_localization)
PAPec<- PAPec$EC_Late*-1
points(PAPec ~ PARRm, col = colorE)
em<-plotRegressionWithCI(PARRm, PAPec, colors = c(colorE_trans, colorE))
er<-summary(em)$r.squared
summary(em)
ANOVAdata<- PrepdataforANOVA(passive_reaches,terminal_reaches)
install.packages("rstatix")
library(rstatix)
View(ANOVAdata)
anova_test(ANOVAdata, Deviations~Time*Experiment, dv=Deviations, wid=ID, within=Time, between = Experiment, type = 3)
anova_test(ANOVAdata, Deviations~Time*Experiment, dv=Deviations, wid=ID, within=Time, between = Experiment, type = 3, correction = "GG", detailed = "TRUE")
anova_test(ANOVAdata, Deviations~Time*Experiment, dv=Deviations, wid=ID, within=Time, between = Experiment, type = 3, detailed = "TRUE")
anova_test(ANOVAdata, Deviations~Time*Experiment, dv=Deviations, wid=ID, within=Time, between = Experiment, type = 3)
x<- anova_test(ANOVAdata, Deviations~Time*Experiment, dv=Deviations, wid=ID, within=Time, between = Experiment, type = 3)
get_anova_table(x, correction = c("auto", "GG", "HF", "none"))
x
get_anova_table(x, correction = "GG")
x<- anova_test(ANOVAdata, Deviations~Time*Experiment, dv=Deviations, wid=ID, within=Time, type = 3)
get_anova_table(x, correction = "GG")
x
x<- anova_test(ANOVAdata, Deviations~Time*Experiment, dv=Deviations, wid=ID, within=Time, type = 3)
x
x<- anova_test(ANOVAdata, Deviations~Time, dv=Deviations, wid=ID, within=Time, type = 3)
x
library(SMCL)
library(svglite)
svglite('figs/Manuscript Figures_May16.svg', width = 12, height = 8, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3,4), nrow = 2, byrow = TRUE))
Localizations(passive_localization, terminal_localization, exposure_localization)
mtext('a', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
plotpassiveprop4points()
mtext('b', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
neuromatchReaches()
mtext('c', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
plotREAANOVA()
mtext('d', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
dev.off()
library(RateRate)
svglite('figs/Manuscript Figures_May16.svg', width = 12, height = 8, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3,4), nrow = 2, byrow = TRUE))
Localizations(passive_localization, terminal_localization, exposure_localization)
mtext('a', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
plotpassiveprop4points()
mtext('b', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
neuromatchReaches()
mtext('c', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
plotREAANOVA()
mtext('d', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
dev.off()
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel_terminal.R')
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel_terminal.R')
plotSaturation()
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel_terminal.R')
plotSaturation()
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel_terminal.R')
plotSaturation()
RegressionPLot()
svglite('figs/regression plot.svg', width = 4, height = 4, system_fonts=list(sans = "Arial"))
RegressionPLot()
dev.off()
svglite('figs/regression plot.svg', width = 6, height = 6, system_fonts=list(sans = "Arial"))
RegressionPLot()
dev.off()
dev.off()
svglite('figs/regression plot.svg', width = 6, height = 6, system_fonts=list(sans = "Arial"))
RegressionPLot()
dev.off()
svglite('figs/regression plot.svg', width = 6, height = 6, system_fonts=list(sans = "Arial"))
RegressionPLot()
dev.off()
install.packages("rmarkdown")
install.packages("BayesFactor")
source('R/shared.R')
source('R/Figures.R')
source('R/Analysis.R')
install.packages("bayestestR")
source('R/Analysis.R')
source('R/asymptoticDecayModel_terminal.R')
source('R/Repeated_Measures_Combine.R')
View(Rebounds)
cLR<- read.csv("data/exposure_localization_main_semi.csv", header = TRUE)
cLR<- read.csv("data/continuous_localization_main_semi.csv", header = TRUE)
cLR<- read.csv("data/passive_localization_main_semi.csv", header = TRUE)
TLR<- read.csv("data/terminal_localization_main_semi.csv", header = TRUE)
ELR<- read.csv("data/exposure_localization_main_semi.csv", header = TRUE)
LRdata<- rbind(cLR,TLR,ELR)
LRdata$experiment<- c(rep("Continuous", times = 1000),rep("Terminal", times = 1000),rep("Exposure", times = 1000))
View(LRdata)
View(LRdata)
ttestBF(LRdata$lambda[LRdata$Experiment == 'Continuous'], LRdata$lambda[LRdata$Experiment == 'Terminal'], paired = FALSE)
library(BayesFactor)
ttestBF(LRdata$lambda[LRdata$Experiment == 'Continuous'], LRdata$lambda[LRdata$Experiment == 'Terminal'], paired = FALSE)
LRdata$lambda[LRdata$Experiment == 'Continuous']
ttestBF(LRdata$lambda[LRdata$experiment == 'Continuous'], LRdata$lambda[LRdata$experiment == 'Terminal'], paired = FALSE)
ttestBF(LRdata$lambda[LRdata$experiment == 'Continuous'], LRdata$lambda[LRdata$experiment == 'Exposure'], paired = FALSE)
source("~/school work/VisualFeedback/R/asymptoticDecayModel_terminal.R")
settings <- asymptoticDecaySettings()
groupsignals <- settings[['groupsignals']]
trialsets    <- settings[['trialsets']]
baselines    <- settings[['baselines']]
schedules    <- settings[['schedules']]
FUN          <- settings[['FUN']]
useOptimx    <- settings[['useOptimx']]
group<- names(groupsignals)[1]
View(groupsignals)
signalname<- groupsignals[[group]][1]
leadingzero <- FALSE
if (signalname %in% c('localization', 'nocursors')) {
leadingzero <- TRUE
}
df <- read.csv(sprintf('data1/%s_%s.csv',group,signalname))
df <- df[,participants]
participants <- sprintf('p%d',c(1:32))
# determine length of baseline period and schedule-direction:
BL <- baselines[[group]][[signalname]]
schedulesign <- schedules[[group]][[signalname]]
# loop through parts of the signal we want to fit:
for (trialset in names(trialsets)) {
# get the part of the data we want to fit:
indices <- trialsets[[trialset]] + BL
#print(indices)
setdf <- df[indices,]
# here we store all the bootstrapped parameters:
lambda <- c()
N0 <- c()
# we need to baseline to end of main training for reversal modeling:
for (pp in participants) {
setdf[,pp] <- setdf[,pp] * schedulesign
if (trialset == 'reversal') { # main training is already baselined
if (signalname == 'slowprocess') {
setdf[,pp] <- setdf[,pp] - df[,pp][ min(indices) - 1 ]
} else {
a_i <- c(81:160) + BL
asymptote <- (mean(df[,pp][a_i], na.rm=TRUE) * schedulesign)
setdf[,pp] <- setdf[,pp] - asymptote
}
setdf[,pp] <- setdf[,pp] * -1
}
}
# baselining done
# schedule is a vector of values -1 and length the same as the signal:
schedulelength <- dim(setdf)[1]
if (leadingzero) {schedulelength <- schedulelength + 1}
schedule <- rep(-1, schedulelength)
#print(schedulelength)
# if in reversal phase, we want to use the asymptote from the main rotation
# which we get from the whole data
if (trialset == 'reversal') {
# get the part of the data we want to fit:
Aindices <- trialsets[['main']] + BL
#print(Aindices)
Asetdf <- df[Aindices,]
for (pp in participants) {
Asetdf[,pp] <- Asetdf[,pp] * schedulesign
}
Aschedulelength <- dim(Asetdf)[1]
if (leadingzero) {Aschedulelength <- Aschedulelength + 1}
Aschedule <- rep(-1, Aschedulelength)
Asignal <- apply(Asetdf, MARGIN=1, FUN=FUN, na.rm=TRUE)
if (leadingzero) {Asignal <- c(0, Asignal)}
par <- asymptoticDecayFit(schedule=Aschedule, signal=Asignal, useOptimx=useOptimx)
#print(par)
# twice as large! (will reduce the fitted lambda, but that makes sense...)
setAsymptote <- par['N0'] * 2
} else {
setAsymptote <- FALSE
}
# bootstrap parameters, by resampling participants:
for (bs in c(1:bootstraps)) {
cat(sprintf('group: %s, signal: %s, set: %s, bootstrap: %d/%d\n', group, signalname, trialset, bs, bootstraps))
signal <- apply(setdf[sample(participants, replace=TRUE)], MARGIN=1, FUN=FUN, na.rm=TRUE)
if (leadingzero) {signal <- c(0, signal)}
#print(c(length(signal), length(schedule)))
par <- asymptoticDecayFit(schedule=schedule, signal=signal, setAsymptote=setAsymptote, useOptimx=useOptimx)
#plot(signal, type='l', main=par)
#print(par)
lambda <- c(lambda, par['lambda'])
if (trialset == 'main') {
N0 <- c(N0, par['N0'])
} else {
N0 <- c(N0, setAsymptote)
}
}
write.csv(data.frame(lambda, N0), file=sprintf('data/%s_%s_%s_semi.csv',group,signalname,trialset), quote=F, row.names=F)
}
source("~/school work/VisualFeedback/R/shared.R")
loadalldata()
View(exposure_localization)
setdata<- c(0,passive_localization[65:224])
setdata<- c(0,passive_localization[65:224,2])
par<- asymptoticDecayFit(schedule = schedule, signal = setdata )
source("~/school work/VisualFeedback/R/asymptoticDecayModel_terminal.R")
settings <- asymptoticDecaySettings()
groupsignals <- settings[['groupsignals']]
trialsets    <- settings[['trialsets']]
baselines    <- settings[['baselines']]
schedules    <- settings[['schedules']]
FUN          <- settings[['FUN']]
useOptimx    <- settings[['useOptimx']]
group<- "passive"
participants <- sprintf('p%d',c(1:32))
signalname<- "localization"
leadingzero <- FALSE
if (signalname %in% c('localization', 'nocursors')) {
leadingzero <- TRUE
}
df <- read.csv(sprintf('data1/%s_%s.csv',group,signalname))
df <- df[,participants]
View(df)
# determine length of baseline period and schedule-direction:
BL <- baselines[[group]][[signalname]]
schedulesign <- schedules[[group]][[signalname]]
trialset<- 'main'
# get the part of the data we want to fit:
indices <- trialsets[[trialset]] + BL
#print(indices)
setdf <- df[indices,]
# here we store all the bootstrapped parameters:
lambda <- c()
N0 <- c()
# we need to baseline to end of main training for reversal modeling:
for (pp in participants) {
setdf[,pp] <- setdf[,pp] * schedulesign
if (trialset == 'reversal') { # main training is already baselined
if (signalname == 'slowprocess') {
setdf[,pp] <- setdf[,pp] - df[,pp][ min(indices) - 1 ]
} else {
a_i <- c(81:160) + BL
asymptote <- (mean(df[,pp][a_i], na.rm=TRUE) * schedulesign)
setdf[,pp] <- setdf[,pp] - asymptote
}
setdf[,pp] <- setdf[,pp] * -1
}
}
# schedule is a vector of values -1 and length the same as the signal:
schedulelength <- dim(setdf)[1]
if (leadingzero) {schedulelength <- schedulelength + 1}
schedule <- rep(-1, schedulelength)
# if in reversal phase, we want to use the asymptote from the main rotation
# which we get from the whole data
if (trialset == 'reversal') {
# get the part of the data we want to fit:
Aindices <- trialsets[['main']] + BL
#print(Aindices)
Asetdf <- df[Aindices,]
for (pp in participants) {
Asetdf[,pp] <- Asetdf[,pp] * schedulesign
}
Aschedulelength <- dim(Asetdf)[1]
if (leadingzero) {Aschedulelength <- Aschedulelength + 1}
Aschedule <- rep(-1, Aschedulelength)
Asignal <- apply(Asetdf, MARGIN=1, FUN=FUN, na.rm=TRUE)
if (leadingzero) {Asignal <- c(0, Asignal)}
par <- asymptoticDecayFit(schedule=Aschedule, signal=Asignal, useOptimx=useOptimx)
#print(par)
# twice as large! (will reduce the fitted lambda, but that makes sense...)
setAsymptote <- par['N0'] * 2
} else {
setAsymptote <- FALSE
}
bs = 1
cat(sprintf('group: %s, signal: %s, set: %s, bootstrap: %d/%d\n', group, signalname, trialset, bs, bootstraps))
bootstraps <- 10
cat(sprintf('group: %s, signal: %s, set: %s, bootstrap: %d/%d\n', group, signalname, trialset, bs, bootstraps))
signal <- apply(setdf[sample(participants, replace=TRUE)], MARGIN=1, FUN=FUN, na.rm=TRUE)
if (leadingzero) {signal <- c(0, signal)}
par <- asymptoticDecayFit(schedule=schedule, signal=signal, setAsymptote=setAsymptote, useOptimx=useOptimx)
par<- asymptoticDecayFit(schedule = schedule, signal = setdata, setAsymptote = FALSE )
setdata<- c(0,passive_localization[65:224,2])
loadalldata
loadalldata()
source("~/school work/VisualFeedback/R/shared.R")
loadalldata()
setdata<- c(0,passive_localization[65:224,2])
par<- asymptoticDecayFit(schedule = schedule, signal = setdata, setAsymptote = FALSE )
setdata<- c(0,passive_localization[65:224,3])
par<- asymptoticDecayFit(schedule = schedule, signal = setdata, setAsymptote = FALSE )
pars<-c()
for (i in 2:33){
setdata<- c(0,passive_localization[65:224,i])
par<- asymptoticDecayFit(schedule = schedule, signal = setdata, setAsymptote = FALSE )
pars<- rbind(pars,par)
}
View(pars)
for (i in 2:33){
setdata<- c(0,terminal_localization[65:224,i])
par<- asymptoticDecayFit(schedule = schedule, signal = setdata, setAsymptote = FALSE )
pars<- rbind(pars,par)
}
View(pars)
for (i in 2:33){
setdata<- c(0,exposure_localization[65:224,i])
par<- asymptoticDecayFit(schedule = schedule, signal = setdata, setAsymptote = FALSE )
pars<- rbind(pars,par)
}
View(pars)
install.packages("optimx")
install.packages("Rtools")
install.packages("optimx")
pars<-c()
for (i in 2:33){
setdata<- c(0,passive_localization[65:224,i])
par<- asymptoticDecayFit(schedule = schedule, signal = setdata, setAsymptote = FALSE )
pars<- rbind(pars,par)
}
View(pars)
source("~/school work/VisualFeedback/R/asymptoticDecayModel_terminal.R")
pars<-c()
for (i in 2:33){
setdata<- c(0,passive_localization[65:224,i])
par<- asymptoticDecayFit(schedule = schedule, signal = setdata, setAsymptote = FALSE )
pars<- rbind(pars,par)
}
View(pars)
for (i in 2:33){
setdata<- c(0,terminal_localization[65:224,i])
par<- asymptoticDecayFit(schedule = schedule, signal = setdata, setAsymptote = FALSE )
pars<- rbind(pars,par)
}
for (i in 2:33){
setdata<- c(0,exposure_localization[65:224,i])
par<- asymptoticDecayFit(schedule = schedule, signal = setdata, setAsymptote = FALSE )
pars<- rbind(pars,par)
}
View(pars)
pars$experiment<- c(rep("Continuous", times = 32),rep("Terminal", times = 32),rep("Exposure", times = 32))
View(pars)
pars<- data.frame(pars)
View(pars)
pars<-c()
for (i in 2:33){
setdata<- c(0,passive_localization[65:224,i])
par<- asymptoticDecayFit(schedule = schedule, signal = setdata, setAsymptote = FALSE )
pars<- rbind(pars,par)
}
for (i in 2:33){
setdata<- c(0,terminal_localization[65:224,i])
par<- asymptoticDecayFit(schedule = schedule, signal = setdata, setAsymptote = FALSE )
pars<- rbind(pars,par)
}
for (i in 2:33){
setdata<- c(0,exposure_localization[65:224,i])
par<- asymptoticDecayFit(schedule = schedule, signal = setdata, setAsymptote = FALSE )
pars<- rbind(pars,par)
}
pars<- data.frame(pars)
View(pars)
pars$experiment<- c(rep("Continuous", times = 32),rep("Terminal", times = 32),rep("Exposure", times = 32))
ttestBF(pars$lambda[pars$experiment == 'Continuous'], pars$lambda[pars$experiment == 'Terminal'], paired = FALSE)
ttestBF(pars$lambda[pars$experiment == 'Continuous'], pars$lambda[pars$experiment == 'Exposure'], paired = FALSE)
