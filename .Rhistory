dev.off()
svglite('figs/Schedule.svg', width = 5, height = 4, system_fonts=list(sans = "Arial"))
Plotschedule(passive_reaches)
dev.off()
svglite('figs/Schedule.svg', width = 5, height = 3, system_fonts=list(sans = "Arial"))
Plotschedule(passive_reaches)
dev.off()
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
svglite('figs/Schedule.svg', width = 5, height = 3, system_fonts=list(sans = "Arial"))
Plotschedule(passive_reaches)
dev.off()
svglite('figs/Schedule.svg', width = 6, height = 3, system_fonts=list(sans = "Arial"))
Plotschedule(passive_reaches)
dev.off()
plotfitPropModel(passive_reaches, passive_localization, colorPA, 'Passive Localizations')
View(passive_reaches)
PropModel <- function(par, schedule) {
locest<-c()
#loop through the perturbations in the schedule:
for (t in c(1:length(schedule))) {
# first we calculate what the model does, since the model is proportional, we just multiply the one parameters by the schedule to get what the person should do
locest[t] <- par * schedule[t]
}
# after we loop through all trials, we return the model output:
return(locest)
}
PropModelMSE <- function(par, schedule, localizations) {
locesti<- PropModel(par, schedule)
errors <- locesti - localizations
MSE <- mean(errors^2, na.rm=TRUE)
return( MSE )
}
gridsearch<- function(localizations, schedule, nsteps=7, topn=4) {
cat('doing grid search...\n')
steps <- nsteps #say how many points inbetween 0-1 we want
pargrid <- seq(0.5*(1/steps),1-(0.5*(1/steps)),by=1/steps) #not sure what exactly this does
MSE<- rep(NA, length(pargrid))
pargrid<- cbind(pargrid, MSE)
for (gridpoint in c(1:nrow(pargrid))) { #for each row
par<-unlist(pargrid[gridpoint,1])    #take that row and take it out of df and make it par
pargrid[gridpoint,2] <- PropModelMSE(par, schedule,localizations)
}
bestN <- order(pargrid[,2])[1:topn]
return(pargrid[bestN,])
}
localizations<-rowMeans(passive_localization[,2:ncol(passive_localization)], na.rm=TRUE)
distortion<- c(rep(0, 64), rep(30, 160), rep (-30,16))
clampreaches<-rowMeans(passive_reaches[241:288,2:ncol(passive_reaches)], na.rm=TRUE)
clampreaches<- clampreaches*-1
schedule<- c(distortion,clampreaches)
#this function will take the dataframe made in the last function (dogridsearch) and use the list of parameters to make a new model then compare to output and get a new mse.
pargrid <- gridsearch(localizations, schedule, nsteps = 7, topn = 4)
cat('optimize best fits...\n')
for (gridpoint in c(1:nrow(pargrid))) { #for each row
par<-unlist(pargrid[gridpoint,1])
control <- list('maxit'=10000, 'ndeps'=1e-9 )
fit <- optim(par=par, PropModelMSE, gr=NULL, schedule, localizations, control=control, method = "Brent", lower = 0, upper = 1)
optpar<- fit$par
# stick optpar back in pargrid
pargrid[gridpoint,1] <- optpar
pargrid[gridpoint,2]<- fit$value
}
# get lowest MSE, and pars that go with that
bestpar <- order(pargrid[,2])[1]
plot(localizations, type = 'l',  ylim = c(-15,15), axes = FALSE, main = title, ylab = 'Change in Hand Localizations [°]', xlab = "Trial", col = color, cex.lab = 1.5, cex.main = 1.5)
plot(localizations, type = 'l',  ylim = c(-15,15), axes = FALSE, main = title, ylab = 'Change in Hand Localizations [°]', xlab = "Trial", col = color_PA, cex.lab = 1.5, cex.main = 1.5)
plot(localizations, type = 'l',  ylim = c(-15,15), axes = FALSE, main = title, ylab = 'Change in Hand Localizations [°]', xlab = "Trial", col = color_PA, cex.lab = 1.5, cex.main = 1.5)
plot(localizations, type = 'l',  ylim = c(-15,15), axes = FALSE, main = title, ylab = 'Change in Hand Localizations [°]', xlab = "Trial", col = colorPA, cex.lab = 1.5, cex.main = 1.5)
plot(1000,1000, type = 'l',  ylim = c(-15,15), axes = FALSE, main = title, ylab = 'Change in Hand Localizations [°]', xlab = "Trial", col = colorPA, cex.lab = 1.5, cex.main = 1.5)
plot(1000,1000, type = 'l',  ylim = c(-15,15), axes = FALSE, main = "Proportional Model", ylab = 'Change in Hand Localizations [°]', xlab = "Trial", col = colorPA, cex.lab = 1.5, cex.main = 1.5)
View(fitPropModel)
fitPropModel(passive_reaches,passive_localization)
contprop<-fitPropModel(passive_reaches,passive_localization)
plot(contprop, type = 'l')
plotpropmodels()
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel_terminal.R')
svglite('figs/Localization plots.svg', width = 12, height = 6, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2), nrow = 1, byrow = TRUE))
RegressionPLot()
mtext('a', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
plotpropmodels()
mtext('b', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
dev.off()
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
svglite('figs/Localization plots.svg', width = 12, height = 6, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2), nrow = 1, byrow = TRUE))
RegressionPLot()
mtext('a', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
plotpropmodels()
mtext('b', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
dev.off()
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
svglite('figs/Manuscript Figures_June2nd.svg', width = 12, height = 12, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3,4,5,6), nrow = 3, byrow = TRUE))
Localizations(passive_localization, terminal_localization, exposure_localization)
mtext('a', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
plotpassiveprop4points()
mtext('b', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
neuromatchReaches()
mtext('c', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
plotREAANOVA()
mtext('d', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
plotSaturation()
mtext('e', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
plotSaturation()
mtext('f', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
dev.off()
plotfitPropModel(passive_reaches, passive_localization, colorPA, 'Passive Localizations')
plotfitPropModel(passive_reaches, passive_localization, colorPA, 'Continuous Localizations')
plotfitPropModel(terminal_reaches, terminal_localization, colorT, 'Terminal Localizations')
plotfitPropModel(terminal_reaches, terminal_localization, colorT, 'Terminal Localizations')
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
plotfitPropModel(passive_reaches, passive_localization, colorPA, 'Continuous Localizations')
plotfitPropModel(terminal_reaches, terminal_localization, colorT, 'Terminal Localizations')
plotfitPropModel(exposure_reaches, exposure_localization, colorPA, 'Exposure Localizations', exposure = TRUE)
plotfitPropModel(exposure_reaches, exposure_localization, colorE, 'Exposure Localizations', exposure = TRUE)
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
svglite('figs/regression plot.svg', width = 6, height = 6, system_fonts=list(sans = "Arial"))
RegressionPLot()
dev.off()
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
svglite('figs/regression plot.svg', width = 6, height = 6, system_fonts=list(sans = "Arial"))
RegressionPLot()
dev.off()
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
svglite('figs/Localization plots.svg', width = 6, height = 12, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3), nrow = 3, byrow = TRUE))
plotfitPropModel(passive_reaches, passive_localization, colorPA, 'Continuous Localizations')
mtext('a', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
plotfitPropModel(terminal_reaches, terminal_localization, colorT, 'Terminal Localizations')
mtext('b', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
plotfitPropModel(exposure_reaches, exposure_localization, colorE, 'Exposure Localizations', exposure = TRUE)
mtext('c', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
dev.off()
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
svglite('figs/Localization plots.svg', width = 6, height = 12, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3), nrow = 3, byrow = TRUE))
plotfitPropModel(passive_reaches, passive_localization, colorPA, 'Continuous Localizations')
mtext('a', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
plotfitPropModel(terminal_reaches, terminal_localization, colorT, 'Terminal Localizations')
mtext('b', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
plotfitPropModel(exposure_reaches, exposure_localization, colorE, 'Exposure Localizations', exposure = TRUE)
mtext('c', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
dev.off()
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
svglite('figs/Localization plots.svg', width = 6, height = 12, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3), nrow = 3, byrow = TRUE))
plotfitPropModel(passive_reaches, passive_localization, colorPA, 'Continuous Localizations')
mtext('a', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
plotfitPropModel(terminal_reaches, terminal_localization, colorT, 'Terminal Localizations')
mtext('b', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
plotfitPropModel(exposure_reaches, exposure_localization, colorE, 'Exposure Localizations', exposure = TRUE)
mtext('c', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
dev.off()
svglite('figs/Localization plots.svg', width = 5, height = 19, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3), nrow = 3, byrow = TRUE))
plotfitPropModel(passive_reaches, passive_localization, colorPA, 'Continuous Localizations')
mtext('a', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
plotfitPropModel(terminal_reaches, terminal_localization, colorT, 'Terminal Localizations')
mtext('b', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
plotfitPropModel(exposure_reaches, exposure_localization, colorE, 'Exposure Localizations', exposure = TRUE)
mtext('c', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
dev.off()
svglite('figs/Localization plots.svg', width = 5, height = 9, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3), nrow = 3, byrow = TRUE))
plotfitPropModel(passive_reaches, passive_localization, colorPA, 'Continuous Localizations')
mtext('a', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
plotfitPropModel(terminal_reaches, terminal_localization, colorT, 'Terminal Localizations')
mtext('b', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
plotfitPropModel(exposure_reaches, exposure_localization, colorE, 'Exposure Localizations', exposure = TRUE)
mtext('c', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
dev.off()
svglite('figs/Localization plots.svg', width = 4, height = 10, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3,4), nrow = 4, byrow = TRUE), heights = c(1,1,1,2))
plotfitPropModel(passive_reaches, passive_localization, colorPA, 'Continuous Localizations')
mtext('a', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
plotfitPropModel(terminal_reaches, terminal_localization, colorT, 'Terminal Localizations')
mtext('b', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
plotfitPropModel(exposure_reaches, exposure_localization, colorE, 'Exposure Localizations', exposure = TRUE)
mtext('c', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
RegressionPLot()
mtext('d', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
dev.off()
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
svglite('figs/Localization plots.svg', width = 4, height = 10, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3,4), nrow = 4, byrow = TRUE), heights = c(1,1,1,2))
plotfitPropModel(passive_reaches, passive_localization, colorPA, 'Continuous Localizations')
mtext('a', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
plotfitPropModel(terminal_reaches, terminal_localization, colorT, 'Terminal Localizations')
mtext('b', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
plotfitPropModel(exposure_reaches, exposure_localization, colorE, 'Exposure Localizations', exposure = TRUE)
mtext('c', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
RegressionPLot()
mtext('d', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
dev.off()
svglite('figs/regression plot.svg', width = 4, height = 4, system_fonts=list(sans = "Arial"))
mtext('d', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
RegressionPLot()
dev.off()
svglite('figs/Localization plots.svg', width = 4, height = 6, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3), nrow = 3, byrow = TRUE), heights = c(1,1,1,2))
plotfitPropModel(passive_reaches, passive_localization, colorPA, 'Continuous Localizations')
mtext('a', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
plotfitPropModel(terminal_reaches, terminal_localization, colorT, 'Terminal Localizations')
mtext('b', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
plotfitPropModel(exposure_reaches, exposure_localization, colorE, 'Exposure Localizations', exposure = TRUE)
mtext('c', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
dev.off()
svglite('figs/regression plot.svg', width = 4, height = 4, system_fonts=list(sans = "Arial"))
RegressionPLot()
mtext('d', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
dev.off()
svglite('figs/regression plot.svg', width = 6, height = 6, system_fonts=list(sans = "Arial"))
RegressionPLot()
mtext('d', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
dev.off()
svglite('figs/regression plot.svg', width = 6, height = 6, system_fonts=list(sans = "Arial"))
RegressionPLot()
mtext('d', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2)
dev.off()
svglite('figs/Localization plots.svg', width = 4, height = 6.75, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3), nrow = 3, byrow = TRUE), heights = c(1,1,1,2))
plotfitPropModel(passive_reaches, passive_localization, colorPA, 'Continuous Localizations')
mtext('a', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2)
plotfitPropModel(terminal_reaches, terminal_localization, colorT, 'Terminal Localizations')
mtext('b', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2)
plotfitPropModel(exposure_reaches, exposure_localization, colorE, 'Exposure Localizations', exposure = TRUE)
mtext('c', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2)
dev.off()
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
source('E:/Jenn/Documents/VisualFeedback/R/shared.R')
loadalldata()
loadcolors()
library(RateRate)
library(SMCL)
Propmodelcomparison<- function(reachdata,locdata, exp){
library(RateRate)
library(SMCL)
##getMSE for onerate model
df<- getreachesformodel(reachdata)
schedule <- df$distortion
Reaches<- df$meanreaches
oneRateFit <- fitTwoRateReachModel(reaches=Reaches, schedule=schedule, oneTwoRates=1, grid=grid, checkStability=TRUE)
oneRateMSE <- twoRateReachModelErrors(par=oneRateFit, reaches=Reaches, schedule=schedule)
#getMSE for prop model
par<-fitPropModel(reachdata, locdata, exp = exp)
PropModel_MSE<- PropModelMSE(par,schedule, locdata)
N <- dim(df)[2] - 1
# the median length of a phase is 40 trials,
# and there are 7.2 of those in 288 trials
InOb <- seriesEffectiveSampleSize(Reaches, method='ac_lag95%CI')
print(InOb)
# this is then used for C:
#C <- InOb*(log(2*pi)+1)
#twoRateAIC <- (2*4) + InOb*log(twoRateMSE) + C
#oneRateAIC <- (2*2) + InOb*log(oneRateMSE) + C
PropModelAIC<-(InOb * log(PropModel_MSE)) + (2 * 4)
oneRateAIC<-(InOb * log(oneRateMSE)) + (2 * 2)
cat(sprintf('1-rate AIC: %0.2f  %s  2-rate AIC: %0.2f\n',oneRateAIC,c('>=', ' <')[as.numeric(oneRateAIC<PropModelAIC)+1],PropModelAIC))
likelihood<-exp((min(c(PropModelAIC, oneRateAIC))-c(PropModelAIC, oneRateAIC))/2)
print(likelihood)
#pars<- data.frame(twoRateFit)
metrics<- data.frame(PropmodelAIC, oneRateAIC, likelihood[1], likelihood[2])
names(metrics)<- c('PropmodelAIC', 'oneRateAIC', 'twoRatelikelihood', 'oneratelikelihood')
}
Propmodelcomparison<- function(reachdata,locdata, exp){
library(RateRate)
library(SMCL)
##getMSE for onerate model
df<- getreachesformodel(reachdata)
schedule <- df$distortion
Reaches<- df$meanreaches
oneRateFit <- fitTwoRateReachModel(reaches=Reaches, schedule=schedule, oneTwoRates=1, grid=grid, checkStability=TRUE)
oneRateMSE <- twoRateReachModelErrors(par=oneRateFit, reaches=Reaches, schedule=schedule)
#getMSE for prop model
par<-fitPropModel(reachdata, locdata, exp = exp)
PropModel_MSE<- PropModelMSE(par,schedule, locdata)
N <- dim(df)[2] - 1
# the median length of a phase is 40 trials,
# and there are 7.2 of those in 288 trials
InOb <- seriesEffectiveSampleSize(Reaches, method='ac_lag95%CI')
print(InOb)
# this is then used for C:
#C <- InOb*(log(2*pi)+1)
#twoRateAIC <- (2*4) + InOb*log(twoRateMSE) + C
#oneRateAIC <- (2*2) + InOb*log(oneRateMSE) + C
PropModelAIC<-(InOb * log(PropModel_MSE)) + (2 * 4)
oneRateAIC<-(InOb * log(oneRateMSE)) + (2 * 2)
cat(sprintf('1-rate AIC: %0.2f  %s  2-rate AIC: %0.2f\n',oneRateAIC,c('>=', ' <')[as.numeric(oneRateAIC<PropModelAIC)+1],PropModelAIC))
likelihood<-exp((min(c(PropModelAIC, oneRateAIC))-c(PropModelAIC, oneRateAIC))/2)
print(likelihood)
#pars<- data.frame(twoRateFit)
metrics<- data.frame(PropmodelAIC, oneRateAIC, likelihood[1], likelihood[2])
names(metrics)<- c('PropmodelAIC', 'oneRateAIC', 'twoRatelikelihood', 'oneratelikelihood')
return(metrics)
}
continuousmetrics<-Propmodelcomparison(passive_reaches,passive_localization, 1)
Propmodelcomparison<- function(reachdata,locdata, exp){
library(RateRate)
library(SMCL)
##getMSE for onerate model
df<- getreachesformodel(reachdata)
schedule <- df$distortion
Reaches<- df$meanreaches
oneRateFit <- fitTwoRateReachModel(reaches=Reaches, schedule=schedule, oneTwoRates=1, grid='restricted', checkStability=TRUE)
oneRateMSE <- twoRateReachModelErrors(par=oneRateFit, reaches=Reaches, schedule=schedule)
#getMSE for prop model
par<-fitPropModel(reachdata, locdata, exp = exp)
PropModel_MSE<- PropModelMSE(par,schedule, locdata)
N <- dim(df)[2] - 1
# the median length of a phase is 40 trials,
# and there are 7.2 of those in 288 trials
InOb <- seriesEffectiveSampleSize(Reaches, method='ac_lag95%CI')
print(InOb)
# this is then used for C:
#C <- InOb*(log(2*pi)+1)
#twoRateAIC <- (2*4) + InOb*log(twoRateMSE) + C
#oneRateAIC <- (2*2) + InOb*log(oneRateMSE) + C
PropModelAIC<-(InOb * log(PropModel_MSE)) + (2 * 4)
oneRateAIC<-(InOb * log(oneRateMSE)) + (2 * 2)
cat(sprintf('1-rate AIC: %0.2f  %s  2-rate AIC: %0.2f\n',oneRateAIC,c('>=', ' <')[as.numeric(oneRateAIC<PropModelAIC)+1],PropModelAIC))
likelihood<-exp((min(c(PropModelAIC, oneRateAIC))-c(PropModelAIC, oneRateAIC))/2)
print(likelihood)
#pars<- data.frame(twoRateFit)
metrics<- data.frame(PropmodelAIC, oneRateAIC, likelihood[1], likelihood[2])
names(metrics)<- c('PropmodelAIC', 'oneRateAIC', 'twoRatelikelihood', 'oneratelikelihood')
return(metrics)
}
continuousmetrics<-Propmodelcomparison(passive_reaches,passive_localization, 1)
Propmodelcomparison<- function(reachdata,locdata, exp){
library(RateRate)
library(SMCL)
##getMSE for onerate model
df<- getreachesformodel(reachdata)
schedule <- df$distortion
Reaches<- df$meanreaches
oneRateFit <- fitTwoRateReachModel(reaches=Reaches, schedule=schedule, oneTwoRates=1, grid='restricted', checkStability=TRUE)
oneRateMSE <- twoRateReachModelErrors(par=oneRateFit, reaches=Reaches, schedule=schedule)
#getMSE for prop model
par<-fitPropModel(reachdata, locdata, exp = exp)
PropModel_MSE<- PropModelMSE(par,schedule, locdata)
N <- dim(df)[2] - 1
# the median length of a phase is 40 trials,
# and there are 7.2 of those in 288 trials
InOb <- seriesEffectiveSampleSize(Reaches, method='ac_lag95%CI')
print(InOb)
# this is then used for C:
#C <- InOb*(log(2*pi)+1)
#twoRateAIC <- (2*4) + InOb*log(twoRateMSE) + C
#oneRateAIC <- (2*2) + InOb*log(oneRateMSE) + C
PropModelAIC<-(InOb * log(PropModel_MSE)) + (2 * 4)
oneRateAIC<-(InOb * log(oneRateMSE)) + (2 * 2)
cat(sprintf('1-rate AIC: %0.2f  %s  2-rate AIC: %0.2f\n',oneRateAIC,c('>=', ' <')[as.numeric(oneRateAIC<PropModelAIC)+1],PropModelAIC))
likelihood<-exp((min(c(PropModelAIC, oneRateAIC))-c(PropModelAIC, oneRateAIC))/2)
print(likelihood)
#pars<- data.frame(twoRateFit)
metrics<- data.frame(PropModelAIC, oneRateAIC, likelihood[1], likelihood[2])
names(metrics)<- c('PropmodelAIC', 'oneRateAIC', 'twoRatelikelihood', 'oneratelikelihood')
return(metrics)
}
continuousmetrics<-Propmodelcomparison(passive_reaches,passive_localization, 1)
reachdata<- passive_reaches
locdata<- passive_localization
exp = 1
##getMSE for onerate model
df<- getreachesformodel(reachdata)
View(df)
schedule <- df$distortion
Reaches<- df$meanreaches
oneRateFit <- fitTwoRateReachModel(reaches=Reaches, schedule=schedule, oneTwoRates=1, grid='restricted', checkStability=TRUE)
oneRateMSE <- twoRateReachModelErrors(par=oneRateFit, reaches=Reaches, schedule=schedule)
#getMSE for prop model
par<-fitPropModel(reachdata, locdata, exp = exp)
PropModel_MSE<- PropModelMSE(par,schedule, locdata)
schedule
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
#getMSE for prop model
par<-fitPropModel(reachdata, locdata, exp = exp)
PropModel_MSE<- PropModelMSE(par,schedule, locdata)
locesti<- PropModel(par, schedule)
locesti
localizations<- getreachesformodel(locdata)$meanreaches
errors <- locesti - localizations
MSE <- mean(errors^2, na.rm=TRUE)
Propmodelcomparison<- function(reachdata,locdata, exp){
library(RateRate)
library(SMCL)
##getMSE for onerate model
df<- getreachesformodel(reachdata)
schedule <- df$distortion
Reaches<- df$meanreaches
oneRateFit <- fitTwoRateReachModel(reaches=Reaches, schedule=schedule, oneTwoRates=1, grid='restricted', checkStability=TRUE)
oneRateMSE <- twoRateReachModelErrors(par=oneRateFit, reaches=Reaches, schedule=schedule)
#getMSE for prop model
par<-fitPropModel(reachdata, locdata, exp = exp)
localizations<- getreachesformodel(locdata)$meanreaches
PropModel_MSE<- PropModelMSE(par,schedule, localizations)
N <- dim(df)[2] - 1
# the median length of a phase is 40 trials,
# and there are 7.2 of those in 288 trials
InOb <- seriesEffectiveSampleSize(Reaches, method='ac_lag95%CI')
print(InOb)
# this is then used for C:
#C <- InOb*(log(2*pi)+1)
#twoRateAIC <- (2*4) + InOb*log(twoRateMSE) + C
#oneRateAIC <- (2*2) + InOb*log(oneRateMSE) + C
PropModelAIC<-(InOb * log(PropModel_MSE)) + (2 * 4)
oneRateAIC<-(InOb * log(oneRateMSE)) + (2 * 2)
cat(sprintf('1-rate AIC: %0.2f  %s  2-rate AIC: %0.2f\n',oneRateAIC,c('>=', ' <')[as.numeric(oneRateAIC<PropModelAIC)+1],PropModelAIC))
likelihood<-exp((min(c(PropModelAIC, oneRateAIC))-c(PropModelAIC, oneRateAIC))/2)
print(likelihood)
#pars<- data.frame(twoRateFit)
metrics<- data.frame(PropModelAIC, oneRateAIC, likelihood[1], likelihood[2])
names(metrics)<- c('PropmodelAIC', 'oneRateAIC', 'twoRatelikelihood', 'oneratelikelihood')
return(metrics)
}
continuousmetrics<-Propmodelcomparison(passive_reaches,passive_localization, 1)
Propmodelcomparison<- function(reachdata,locdata, exp){
library(RateRate)
library(SMCL)
##getMSE for onerate model
df<- getreachesformodel(reachdata)
schedule <- df$distortion
Reaches<- df$meanreaches
oneRateFit <- fitTwoRateReachModel(reaches=Reaches, schedule=schedule, oneTwoRates=1, grid='restricted', checkStability=TRUE)
oneRateMSE <- twoRateReachModelErrors(par=oneRateFit, reaches=Reaches, schedule=schedule)
#getMSE for prop model
par<-fitPropModel(reachdata, locdata, exp = exp)
localizations<- getreachesformodel(locdata)$meanreaches
PropModel_MSE<- PropModelMSE(par,schedule, localizations)
N <- dim(df)[2] - 1
# the median length of a phase is 40 trials,
# and there are 7.2 of those in 288 trials
InOb <- seriesEffectiveSampleSize(Reaches, method='ac_lag95%CI')
print(InOb)
# this is then used for C:
#C <- InOb*(log(2*pi)+1)
#twoRateAIC <- (2*4) + InOb*log(twoRateMSE) + C
#oneRateAIC <- (2*2) + InOb*log(oneRateMSE) + C
PropModelAIC<-(InOb * log(PropModel_MSE)) + (2 * 4)
oneRateAIC<-(InOb * log(oneRateMSE)) + (2 * 2)
cat(sprintf('1-rate AIC: %0.2f  %s  PropModel AIC: %0.2f\n',oneRateAIC,c('>=', ' <')[as.numeric(oneRateAIC<PropModelAIC)+1],PropModelAIC))
likelihood<-exp((min(c(PropModelAIC, oneRateAIC))-c(PropModelAIC, oneRateAIC))/2)
print(likelihood)
#pars<- data.frame(twoRateFit)
metrics<- data.frame(PropModelAIC, oneRateAIC, likelihood[1], likelihood[2])
names(metrics)<- c('PropmodelAIC', 'oneRateAIC', 'PropModellikelihood', 'oneratelikelihood')
return(metrics)
}
continuousmetrics<-Propmodelcomparison(passive_reaches,passive_localization, 1)
terminalmetrics<-Propmodelcomparison(terminal_reaches,terminal_localization, 1)
Propmodelcomparison<- function(reachdata,locdata, exp){
library(RateRate)
library(SMCL)
##getMSE for onerate model
df<- getreachesformodel(locdata)
schedule <- df$distortion
Reaches<- df$meanreaches
oneRateFit <- fitTwoRateReachModel(reaches=Reaches, schedule=schedule, oneTwoRates=1, grid='restricted', checkStability=TRUE)
oneRateMSE <- twoRateReachModelErrors(par=oneRateFit, reaches=Reaches, schedule=schedule)
#getMSE for prop model
par<-fitPropModel(reachdata, locdata, exp = exp)
localizations<- getreachesformodel(locdata)$meanreaches
PropModel_MSE<- PropModelMSE(par,schedule, localizations)
N <- dim(df)[2] - 1
# the median length of a phase is 40 trials,
# and there are 7.2 of those in 288 trials
InOb <- seriesEffectiveSampleSize(Reaches, method='ac_lag95%CI')
print(InOb)
# this is then used for C:
#C <- InOb*(log(2*pi)+1)
#twoRateAIC <- (2*4) + InOb*log(twoRateMSE) + C
#oneRateAIC <- (2*2) + InOb*log(oneRateMSE) + C
PropModelAIC<-(InOb * log(PropModel_MSE)) + (2 * 4)
oneRateAIC<-(InOb * log(oneRateMSE)) + (2 * 2)
cat(sprintf('1-rate AIC: %0.2f  %s  PropModel AIC: %0.2f\n',oneRateAIC,c('>=', ' <')[as.numeric(oneRateAIC<PropModelAIC)+1],PropModelAIC))
likelihood<-exp((min(c(PropModelAIC, oneRateAIC))-c(PropModelAIC, oneRateAIC))/2)
print(likelihood)
#pars<- data.frame(twoRateFit)
metrics<- data.frame(PropModelAIC, oneRateAIC, likelihood[1], likelihood[2])
names(metrics)<- c('PropmodelAIC', 'oneRateAIC', 'PropModellikelihood', 'oneratelikelihood')
return(metrics)
}
#MOdel comparisons for prop vs onerate
continuousmetrics<-Propmodelcomparison(passive_reaches,passive_localization, 1)
terminalmetrics<-Propmodelcomparison(terminal_reaches,terminal_localization, 1)
exposuremetrics<-Propmodelcomparison(exposure_reaches,exposure_localization, 2)
source('E:/Jenn/Documents/VisualFeedback/R/Analysis.R')
source('E:/Jenn/Documents/VisualFeedback/R/Analysis.R')
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
svglite('figs/Localization plots.svg', width = 4, height = 6.75, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3), nrow = 3, byrow = TRUE), heights = c(1,1,1,2))
plotfitPropModel(passive_reaches, passive_localization, colorPA, 'Continuous Localizations')
mtext('a', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2)
plotfitPropModel(terminal_reaches, terminal_localization, colorT, 'Terminal Localizations')
mtext('b', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2)
plotfitPropModel(exposure_reaches, exposure_localization, colorE, 'Exposure Localizations', exposure = TRUE)
mtext('c', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2)
dev.off()
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
svglite('figs/Localization plots.svg', width = 4, height = 6.75, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3), nrow = 3, byrow = TRUE), heights = c(1,1,1,2))
plotfitPropModel(passive_reaches, passive_localization, colorPA, 'Continuous Localizations')
mtext('a', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2)
plotfitPropModel(terminal_reaches, terminal_localization, colorT, 'Terminal Localizations')
mtext('b', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2)
plotfitPropModel(exposure_reaches, exposure_localization, colorE, 'Exposure Localizations', exposure = TRUE)
mtext('c', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2)
dev.off()
