summary(model)
rope(model)
p_direction(model)
model<-lm(EC_Late[Rebounds$Experiment == 'Passive']~EC_Late[Rebounds$Experiment == 'Terminal'], data = Rebounds)
p_direction(model)
install.packages("BayesFactor")
anovaBF(EC_Late~Experiment, Rebounds)
library(BayesFactor)
anovaBF(EC_Late~Experiment, Rebounds)
str(Rebounds)
Rebounds$Experiment<- as.factor(Rebounds$Experiment)
str(Rebounds)
anovaBF(EC_Late~Experiment, Rebounds)
ttestBF(Rebounds$EC_Late[Rebounds$Experiment == 'Passive'], Rebounds$EC_Late[Rebounds$Experiment == 'Terminal'], paired = FALSE)
ttestBF(Rebounds$EC_Late[Rebounds$Experiment == 'Passive'], Rebounds$EC_Late[Rebounds$Experiment == 'exposure'], paired = FALSE)
ttestBF(Rebounds$EC_Late[Rebounds$Experiment == 'Passive'], Rebounds$EC_Late[Rebounds$Experiment == 'Exposure'], paired = FALSE)
ttestBF(Rebounds$EC_Late[Rebounds$Experiment == 'Terminal'], Rebounds$EC_Late[Rebounds$Experiment == 'Exposure'], paired = FALSE)
bf<-ttestBF(Rebounds$EC_Late[Rebounds$Experiment == 'Terminal'], Rebounds$EC_Late[Rebounds$Experiment == 'Exposure'], paired = FALSE)
plot(bf)
bf
BayesFactors<- list("Expo vs Continuous", "Continuous vs Terminal", "Terminal vs Expo")
BayesFactors[2]<-ttestBF(Rebounds$EC_Late[Rebounds$Experiment == 'Passive'], Rebounds$EC_Late[Rebounds$Experiment == 'Terminal'], paired = FALSE)
BayesFactors[[2]]<-ttestBF(Rebounds$EC_Late[Rebounds$Experiment == 'Passive'], Rebounds$EC_Late[Rebounds$Experiment == 'Terminal'], paired = FALSE)
View(BayesFactors)
bf
bf[2]
bf[[2]
]
BayesFactors[[2]]
source('E:/Jenn/Documents/VisualFeedback/R/Analysis.R')
anovaBF(EC_Late~Experiment, Rebounds)
ttestBF(Rebounds$EC_Late[Rebounds$Experiment == 'Passive'], Rebounds$EC_Late[Rebounds$Experiment == 'Terminal'], paired = FALSE)
ttestBF(Rebounds$EC_Late[Rebounds$Experiment == 'Exposure'], Rebounds$EC_Late[Rebounds$Experiment == 'Terminal'], paired = FALSE)
ttestBF(Rebounds$EC_Late[Rebounds$Experiment == 'Passive'], Rebounds$EC_Late[Rebounds$Experiment == 'Exposure'], paired = FALSE)
ANOVAPdata<- PrepdataforPropANOVA(passive_localization, terminal_localization, exposure_localization)
View(ANOVAPdata)
anovaBF(Deviations~Time, ANOVAPdata)
ANOVAPdata[,1:2]<- as.factor(ANOVAPdata[,1:2])
str(ANOVAPdata)
ANOVAPdata<- PrepdataforPropANOVA(passive_localization, terminal_localization, exposure_localization)
str(ANOVAPdata)
ANOVAPdata[,c(2,4)]<- as.factor(ANOVAPdata[,c(2,4)])
str(ANOVAPdata)
ANOVAPdata<- PrepdataforPropANOVA(passive_localization, terminal_localization, exposure_localization)
as.factor(ANOVAPdata$Experiment)
ANOVAPdata$Experiment<-as.factor(ANOVAPdata$Experiment)
str(ANOVAPdata)
ANOVAPdata$Time<-as.factor(ANOVAPdata$Time)
str(ANOVAPdata)
anovaBF(Deviations~Time, ANOVAPdata)
anovaBF(Deviations~Experiment, ANOVAPdata)
anovaBF(Deviations~Experiment + Time, ANOVAPdata)
RegressionPLot()
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
RegressionPLot()
source('E:/Jenn/Documents/VisualFeedback/R/shared.R')
RegressionPLot()
source('E:/Jenn/Documents/VisualFeedback/R/shared.R')
loadcolors()
RegressionPLot()
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
RegressionPLot()
grid(nx = 4, ny = 6))
grid(nx = 4, ny = 6)
grid(nx = 4, ny = 6)
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
RegressionPLot()
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
RegressionPLot()
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
RegressionPLot()
abline(h = c(-10,0,10))
abline(h = c(-10,0,10), lty = 3)
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
RegressionPLot()
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
RegressionPLot()
lines(x = c(-10:30), y = 0, lty = 3)
lines(x = c(-10:30), y = rep(0, times = length(-10:30)), lty = 3)
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
RegressionPLot()
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
RegressionPLot()
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
RegressionPLot()
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
RegressionPLot()
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
RegressionPLot()
source('R/shared.R')
source('R/Analysis.R')
source('R/Repeated_Measures_Combine.R')
loadalldata()
Ttestdata<- PrepdataforT(passive_reaches,terminal_reaches)
tanalyzedata(Ttestdata)
library(effsize)
tanalyzedata(Ttestdata)
library(SMCL)
tanalyzedata(Ttestdata)
library(BayesFactor)
Rebounds<- PrepANOVARebounds(passive_reaches,terminal_reaches,exposure_reaches)
ttestBF(Rebounds$EC_Late[Rebounds$Experiment == 'Passive'], paired = FALSE)
ttestBF(Rebounds$EC_Late[Rebounds$Experiment == 'Exposure'], paired = FALSE)
ttestBF(Rebounds$EC_Late[Rebounds$Experiment == 'Terminal'], paired = FALSE)
t.test(Rebounds$EC_Late[Rebounds$Experiment == 'Passive'], paired = FALSE)
t.test(Rebounds$EC_Late[Rebounds$Experiment == 'Terminal'], paired = FALSE)
t.test(Rebounds$EC_Late[Rebounds$Experiment == 'Exposure'], paired = FALSE)
source('E:/Jenn/Documents/VisualFeedback/R/Analysis.R')
anovaBF(Deviations~Experiment+ Time, ANOVAPdata)
anovaBF(Deviations~Time + Experiment, ANOVAPdata)
anovaBF(Deviations~Time * Experiment, ANOVAPdata)
aov(Deviations~Time*Experiment, ANOVAPdata)
stuff<-aov(Deviations~Time*Experiment, ANOVAPdata)
summary(stuff)
stuff<-aov(Deviations~Time_Experiment, ANOVAPdata)
stuff<-aov(Deviations~Time+Experiment, ANOVAPdata)
summary(stuff)
anovaBF(Deviations~Experiment* Time, ANOVAPdata)
TtestPdata<- PrepdataforPropT(passive_localization, terminal_localization, exposure_localization)
t.test(TtestPdata[TtestPdata$Aligned & TtestPdata$Experiment == "Passive"])
t.test(TtestPdata$Aligned[TtestPdata$Experiment == "Passive"])
t.test(TtestPdata$R1_Early[TtestPdata$Experiment == "Passive"])
t.test(TtestPdata$R1_Early[TtestPdata$Experiment == "Terminal"])
t.test(TtestPdata$R1_Early[TtestPdata$Experiment == "Exposure"])
plotRegressionWithCI <-
function(X, Y, colors = c('#99999999', 'black')) {
# fit regression model
this.lm <- lm(Y ~ X)
# where is the interesting data
pointlocs <- seq(min(X, na.rm = TRUE), max(X, na.rm = TRUE), .1)
# get the confidence interval
y1 = predict(this.lm,
newdata = data.frame(X = pointlocs),
interval =
"confidence")[, "upr"]
y2 = predict(this.lm,
newdata = data.frame(X = pointlocs),
interval =
"confidence")[, "lwr"]
# show the confidence interval
polygon(c(pointlocs, rev(pointlocs)),
c(y1, rev(y2)),
col = colors[1],
border = NA)
# and show a regression line:
lines(
range(X, na.rm = TRUE),
predict(this.lm, newdata = data.frame(X = range(X, na.rm = TRUE))),
col = colors[2],
lwd = 2
)
return(this.lm)
}
PRrm <- TCombine(passive_reaches)
PRRm <- PRrm$EC_Late * -1
PPec <- TCombine(passive_localization)
PPec <- PPec$EC_Late
plot(
PPec ~ PRRm,
col = colorPA,
xlab = 'Reaches',
ylab = 'Localization',
main = 'Localization ~ Reaches During Error Clamp',
xlim = c(-30, 30),
ylim = c(-20, 20),
axes = FALSE, asp = 1, cex.lab = 1.25
)
axis(2,
at = c( -20,-10, 0, 10, 20),
cex.axis = 1.2)
axis(1,
at = c(-30,-20,- 10, 0, 10, 20, 30),
cex.axis = 1.2)
lines(x = c(-30:30), y = rep(0, times = length(-30:30)), lty = 3)
abline(v = c(0), lty = 3)
plotRegressionWithCI(PRRm, PPec, colors = c(colorPA_trans, colorPA))
lm<-plotRegressionWithCI(PRRm, PPec, colors = c(colorPA_trans, colorPA))
lm<-plotRegressionWithCI(PRRm, PPec, colors = c(colorPA_trans, colorPA))
summary(lm)
lm$coefficients
lm$coefficients[2]
summmary(lm)$r.squared
summary(lm)$r.squared
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
RegressionPLot()
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
RegressionPLot()
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
RegressionPLot()
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
RegressionPLot()
summary(lm)
lm$coefficients
lm$coefficients[,4]
summary(lm)coefficients[,4]
summary(lm)$coefficients[,4]
summary(lm)$coefficients[2,4]
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
RegressionPLot()
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
RegressionPLot()
source('R/asymptoticDecayModel_terminal.R')
plotSaturation()
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel.R')
plotSaturation()
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel.R')
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel.R')
plotSaturation()
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel_terminal.R')
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel.R')
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel_terminal.R')
bootstrapSemiAsymptoticDecayModels()
settings <- asymptoticDecaySettings()
groupsignals <- settings[['groupsignals']]
trialsets    <- settings[['trialsets']]
baselines    <- settings[['baselines']]
schedules    <- settings[['schedules']]
FUN          <- settings[['FUN']]
useOptimx    <- settings[['useOptimx']]
groupsignals[[group]]
groupsignals
groupsignals[["terminal"]]
signalname<-groupsignals[["terminal"]][1]
leadingzero <- FALSE
if (signalname %in% c('localization', 'nocursors')) {
leadingzero <- TRUE
}
group <- "terminal"
# read in the full data set:
print(group)
print(signalname)
df <- read.csv(sprintf('data1/%s_%s.csv',group,signalname))
df <- df[,participants]
participants <- sprintf('p%d',c(1:32))
df <- df[,participants]
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel_terminal.R')
bootstrapSemiAsymptoticDecayModels()
df <- df[,participants]
df <- read.csv(sprintf('data1/%s_%s.csv',group,signalname))
df <- df[,participants]
View(df)
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel_terminal.R')
bootstrapSemiAsymptoticDecayModels()
participants <- sprintf('p%d',c(1:33))
df <- read.csv(sprintf('data1/%s_%s.csv',group,signalname))
df <- df[,participants]
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel_terminal.R')
bootstrapSemiAsymptoticDecayModels()
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel_terminal.R')
bootstrapSemiAsymptoticDecayModels()
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel_terminal.R')
bootstrapSemiAsymptoticDecayModels()
bootstrapSemiAsymptoticDecayModels()
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel_terminal.R')
getAsymptoticDecayParameterCIs()
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
getSaturationTrials()
plotSaturation()
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel_terminal.R')
plotSaturation()
plot(NULL, xlim = c(0,30), ylim = c(0,1), xlab = "trials in rotation", ylab = "Percentage of asymptote")
lines(x0 = 0, y0 = 0, x1 = 1, y1 = 1)
segments(x0 = 0, y0 = 0, x1 = 1, y1 = 1)
plot(0.5, xlim = c(0,30), ylim = c(0,1), xlab = "trials in rotation", ylab = "Percentage of asymptote")
plot(0.5,0.5, xlim = c(0,30), ylim = c(0,1), xlab = "trials in rotation", ylab = "Percentage of asymptote")
plot(0.5,0.5, xlim = c(0,30), ylim = c(0,1), xlab = "trials in rotation", ylab = "Percentage of asymptote", type = p)
plot(0.5,0.5, xlim = c(0,30), ylim = c(0,1), xlab = "trials in rotation", ylab = "Percentage of asymptote", pch = 1)
plot(1:2,1:2, xlim = c(0,30), ylim = c(0,1), xlab = "trials in rotation", ylab = "Percentage of asymptote", pch = 1)
plot(1:2,1:2, xlim = c(0,30), ylim = c(0,1), xlab = "trials in rotation", ylab = "Percentage of asymptote", pch = 1)
segments(x0 = 0, y0 = 0, x1 = 1, y1 = 1)
arrows(x0 = 0, y0 = 0, x1 = 1, y1 = 1)
segments(x0 = 0, y0 = 0, x1 = 1, y1 = 1)
TIME <- seq(0,160,.1)
xcoords <- TIME
settings <- asymptoticDecaySettings()
groupsignals <- list(
'passive'       = c('reaches','localization'),
'terminal'   = c('localization', 'reaches'),
'exposure'         = c('localization')
)
trialsets    <- settings[['trialsets']]
baselines    <- settings[['baselines']]
schedules    <- settings[['schedules']]
FUN          <- settings[['FUN']]
useOptimx    <- settings[['useOptimx']]
styles <- getStyles()
plot(-1000,-1000,
xlab='trials completed in rotated phase',ylab='percentage of saturation',
main='modeled process speeds',
xlim=c(0,20),ylim=c(0,1.1),
bty='n',ax=F)
TIME <- seq(0,160,.1)
xcoords <- TIME
groupcolors <- c(styles$passive$solid,
styles$terminal$solid,
styles$exposure$solid,
"black",
"grey")
names(groupsignals)[1]
groupname<-names(groupsignals)[1]
groupsignals[[groupname]]
signalname<-groupsignals[[groupname]][1]
leadingzero <- FALSE
if (signalname %in% c('localization', 'nocursors')) {
leadingzero <- TRUE
}
# determine length of baseline period and schedule-direction:
BL <- baselines[[groupname]][[signalname]]
schedulesign <- schedules[[groupname]][[signalname]]
# get the part of the data we want to fit:
indices <- trialsets[[trialset]] + BL
indices<- c(65,165)
indices<- c(65:165)
160+64
indices<- c(65:224)
# schedule is a vector of values -1 and length the same as the signal:
schedulelength <- length(indices)
if (leadingzero) {schedulelength <- schedulelength + 1}
schedule <- rep(-1, schedulelength)
processes <- list()
roc = "lambda"
par <- c('lambda'=df[which(df$group == groupname & df$signal == signalname),roc], 'N0'=df[which(df$group == groupname & df$signal == signalname),'N0'])
par['scale'] <- df$N0_025[which(df$group == groupname & df$signal == signalname)]
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel_terminal.R')
dfit <- asymptoticDecayModel(par,schedule)$output
df <- read.csv('data/asymptoticDecayParameterCIs.csv', stringsAsFactors = F)
View(df)
par <- c('lambda'=df[which(df$group == groupname & df$signal == signalname),roc], 'N0'=df[which(df$group == groupname & df$signal == signalname),'N0'])
par['scale'] <- df$N0_025[which(df$group == groupname & df$signal == signalname)]
dfit <- asymptoticDecayModel(par,schedule)$output
smspl <- smooth.spline(x=c(0:(length(schedule)-1)), y=dfit, spar=NULL)
process <- predict(smspl,TIME)$y
process <- (process) / (par['scale'])
processes[[roc]] <- process
upr <- processes[['lambda_975']]
View(processes)
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel_terminal.R')
df <- read.csv('data/asymptoticDecayParameterCIs.csv', stringsAsFactors = F)
settings <- asymptoticDecaySettings()
groupsignals <- list(
'passive'       = c('reaches','localization'),
'terminal'   = c('reaches','localization'),
'exposure'         = c('localization')
)
groupsignals
trialsets    <- settings[['trialsets']]
baselines    <- settings[['baselines']]
schedules    <- settings[['schedules']]
FUN          <- settings[['FUN']]
useOptimx    <- settings[['useOptimx']]
styles <- getStyles()
styles
plot(-1000,-1000,
xlab='trials completed in rotated phase',ylab='percentage of saturation',
main='modeled process speeds',
xlim=c(0,20),ylim=c(0,1.1),
bty='n',ax=F)
TIME <- seq(0,160,.1)
xcoords <- TIME
groupsignals
groupsignals[1]
names(groupsignals)
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel_terminal.R')
plotSaturation()
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel_terminal.R')
plotSaturation()
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel_terminal.R')
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel_terminal.R')
plotSaturation()
source('R/shared.R')
source('R/Figures.R')
source('R/Figures.R')
source('R/Analysis.R')
source('R/Analysis.R')
source('R/asymptoticDecayModel_terminal.R')
source('R/Repeated_Measures_Combine.R')
loadalldata()
loadalldata()
loadcolors()
Rebounds<- PrepANOVARebounds(passive_reaches,terminal_reaches,exposure_reaches)
t.test(Rebounds$EC_Late[Rebounds$Experiment == 'Passive'], paired = FALSE)
t.test(Rebounds$EC_Late[Rebounds$Experiment == 'Exposure'], paired = FALSE)
t.test(Rebounds$EC_Late[Rebounds$Experiment == 'Terminal'], paired = FALSE)
library(effsize)
cohens.d(Rebounds$EC_Late[Rebounds$Experiment == 'Passive'], paired = FALSE)
cohen.d(Rebounds$EC_Late[Rebounds$Experiment == 'Passive'], paired = FALSE)
cohen.d(Rebounds$EC_Late[Rebounds$Experiment == 'Passive'])
cohen.d(d=Rebounds$EC_Late[Rebounds$Experiment == 'Passive'])
cohen.d(d=Rebounds$EC_Late[Rebounds$Experiment == 'Passive'], na.rm=TRUE)
cohen.d(d=Rebounds$EC_Late[Rebounds$Experiment == 'Passive'],f=NA, na.rm=TRUE)
t.test(Rebounds$EC_Late[Rebounds$Experiment == 'Passive'], paired = FALSE)
cohen.d(d=Rebounds$EC_Late[Rebounds$Experiment == 'Passive'],f=NA, na.rm=TRUE)
t.test(Rebounds$EC_Late[Rebounds$Experiment == 'Terminal'], paired = FALSE)
cohen.d(d=Rebounds$EC_Late[Rebounds$Experiment == 'Terminal'],f=NA, na.rm=TRUE)
t.test(Rebounds$EC_Late[Rebounds$Experiment == 'Exposure'], paired = FALSE)
cohen.d(d=Rebounds$EC_Late[Rebounds$Experiment == 'Exposure'],f=NA, na.rm=TRUE)
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel.R')
plotSaturation()
source('R/shared.R')
source('R/Figures.R')
source('R/Analysis.R')
source('R/asymptoticDecayModel_terminal.R')
source('R/Repeated_Measures_Combine.R')
loadalldata()
loadcolors()
RegressionPLot()
PRrm <- TCombine(passive_reaches)
PRRm <- PRrm$EC_Late * -1
PPec <- TCombine(passive_localization)
PPec <- PPec$EC_Late
plot(
PPec ~ PRRm,
col = colorPA,
xlab = 'Reaches',
ylab = 'Localization',
main = 'Localization ~ Reaches During Error Clamp',
xlim = c(-30, 30),
ylim = c(-20, 20),
axes = FALSE, asp = 1, cex.lab = 1.25
)
axis(2,
at = c( -20,-10, 0, 10, 20),
cex.axis = 1.2)
axis(1,
at = c(-30,-20,- 10, 0, 10, 20, 30),
cex.axis = 1.2)
lines(x = c(-30:30), y = rep(0, times = length(-30:30)), lty = 3)
abline(v = c(0), lty = 3)
lm<-plotRegressionWithCI(PRRm, PPec, colors = c(colorPA_trans, colorPA))
summary(lm)
Arm <- TCombine(terminal_reaches)
ARm <- Arm$EC_Late * -1
APec <- TCombine(terminal_localization)
APec <- APec$EC_Late
points(APec ~ ARm, col = colorT)
tm<-plotRegressionWithCI(ARm, APec, colors = c(colorT_trans, colorT))
tr<-summary(tm)$r.squared
print(summary(tm)$coefficients[2,4])
summary(lm)
summary(tm)
PARRm <- as.numeric(unlist(colMeans(exposure_reaches[33:48,2:33], na.rm = TRUE)))
PAPec <- TCombine(exposure_localization)
PAPec<- PAPec$EC_Late*-1
points(PAPec ~ PARRm, col = colorE)
em<-plotRegressionWithCI(PARRm, PAPec, colors = c(colorE_trans, colorE))
er<-summary(em)$r.squared
summary(em)
ANOVAdata<- PrepdataforANOVA(passive_reaches,terminal_reaches)
install.packages("rstatix")
library(rstatix)
View(ANOVAdata)
anova_test(ANOVAdata, Deviations~Time*Experiment, dv=Deviations, wid=ID, within=Time, between = Experiment, type = 3)
anova_test(ANOVAdata, Deviations~Time*Experiment, dv=Deviations, wid=ID, within=Time, between = Experiment, type = 3, correction = "GG", detailed = "TRUE")
anova_test(ANOVAdata, Deviations~Time*Experiment, dv=Deviations, wid=ID, within=Time, between = Experiment, type = 3, detailed = "TRUE")
anova_test(ANOVAdata, Deviations~Time*Experiment, dv=Deviations, wid=ID, within=Time, between = Experiment, type = 3)
x<- anova_test(ANOVAdata, Deviations~Time*Experiment, dv=Deviations, wid=ID, within=Time, between = Experiment, type = 3)
get_anova_table(x, correction = c("auto", "GG", "HF", "none"))
x
get_anova_table(x, correction = "GG")
x<- anova_test(ANOVAdata, Deviations~Time*Experiment, dv=Deviations, wid=ID, within=Time, type = 3)
get_anova_table(x, correction = "GG")
x
x<- anova_test(ANOVAdata, Deviations~Time*Experiment, dv=Deviations, wid=ID, within=Time, type = 3)
x
x<- anova_test(ANOVAdata, Deviations~Time, dv=Deviations, wid=ID, within=Time, type = 3)
x
library(SMCL)
library(svglite)
svglite('figs/Manuscript Figures_May16.svg', width = 12, height = 8, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3,4), nrow = 2, byrow = TRUE))
Localizations(passive_localization, terminal_localization, exposure_localization)
mtext('a', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
plotpassiveprop4points()
mtext('b', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
neuromatchReaches()
mtext('c', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
plotREAANOVA()
mtext('d', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
dev.off()
library(RateRate)
svglite('figs/Manuscript Figures_May16.svg', width = 12, height = 8, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3,4), nrow = 2, byrow = TRUE))
Localizations(passive_localization, terminal_localization, exposure_localization)
mtext('a', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
plotpassiveprop4points()
mtext('b', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
neuromatchReaches()
mtext('c', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
plotREAANOVA()
mtext('d', outer=FALSE, side=3, las=1, line=1, adj=0, padj=1,cex = 2.5)
dev.off()
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel_terminal.R')
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel_terminal.R')
plotSaturation()
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel_terminal.R')
plotSaturation()
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel_terminal.R')
plotSaturation()
RegressionPLot()
svglite('figs/regression plot.svg', width = 4, height = 4, system_fonts=list(sans = "Arial"))
RegressionPLot()
dev.off()
svglite('figs/regression plot.svg', width = 6, height = 6, system_fonts=list(sans = "Arial"))
RegressionPLot()
dev.off()
dev.off()
svglite('figs/regression plot.svg', width = 6, height = 6, system_fonts=list(sans = "Arial"))
RegressionPLot()
dev.off()
svglite('figs/regression plot.svg', width = 6, height = 6, system_fonts=list(sans = "Arial"))
RegressionPLot()
dev.off()
