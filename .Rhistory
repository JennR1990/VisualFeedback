ReachAftereffectReaches(active_reaches, nocursor_reaches[33:320,], nocursorI_reaches[33:320,])
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
PlotallTapCI(passive_localization,terminal_localization, exposure_localization)
PlotData(expl, 13, 7, 7)
Plotnocursors <- function (acd,ncd_NC, ncdI) {
PlotoutLine(acd, 4:5, 4:5, "Reach Aftereffects")
PlotData(ncd_NC, 4, 4, x =  c(c(33:288), rev(c(33:288))))
PlotData(ncdI, 5, 5, x =  c(c(33:288), rev(c(33:288))))
}
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
PlotallTapCI(passive_localization,terminal_localization, exposure_localization)
PlotData(expl, 7, 7)
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
PlotData(expl, 7, 7)
PlotallTapCI(passive_localization,terminal_localization, exposure_localization)
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
PlotallTapCI(passive_localization,terminal_localization, exposure_localization)
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
ReachAfterEffects(active_reaches, nocursor_nocursors, nocursorI_nocursors)
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
ReachAfterEffects(active_reaches, nocursor_nocursors, nocursorI_nocursors)
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
library("svglite", lib.loc="~/R/win-library/3.5")
layout(matrix(c(1,2), nrow = 2), heights = c(2,2))
layout(matrix(c(1,2), nrow = 2), heights = c(2,2))
VisualFeedbackReaches(active_reaches, passive_reaches, terminal_reaches)
Localizations(passive_localization,terminal_localization, exposure_localization)
svglite('figs/Visual Feedback.svg', width = 6, height = 10, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2), nrow = 2), heights = c(2,2))
VisualFeedbackReaches(active_reaches, passive_reaches, terminal_reaches)
Localizations(passive_localization,terminal_localization, exposure_localization)
dev.off()
svglite('figs/Visual Feedback.svg', width = 6, height = 10, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2), nrow = 2), heights = c(2,2))
VisualFeedbackReaches(active_reaches, passive_reaches, terminal_reaches)
Localizations(passive_localization,terminal_localization, exposure_localization)
dev.off()
svglite('figs/Reach Aftereffects.svg', width = 6, height = 10, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2), nrow = 2), heights = c(2,2))
ReachAfterEffectReaches(active_reaches, nocursor_reaches[33:320,], nocursorI_reaches[33:320,])
ReachAfterEffects(active_reaches, nocursor_nocursors, nocursorI_nocursors)
dev.off()
svglite('figs/Visual Feedback.svg', width = 8, height = 10, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2), nrow = 2), heights = c(2,2))
VisualFeedbackReaches(active_reaches, passive_reaches, terminal_reaches)
Localizations(passive_localization,terminal_localization, exposure_localization)
dev.off()
svglite('figs/Reach Aftereffects.svg', width = 8, height = 10, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2), nrow = 2), heights = c(2,2))
ReachAfterEffectReaches(active_reaches, nocursor_reaches[33:320,], nocursorI_reaches[33:320,])
ReachAfterEffects(active_reaches, nocursor_nocursors, nocursorI_nocursors)
dev.off()
TerminalPars<-Reachmodel(Terminal_reaches, 'Terminal', color = colorT)
TerminalPars<-Reachmodel(terminal_reaches, 'Terminal', color = colorT)
library("RateRate", lib.loc="~/R/win-library/3.5")
TerminalPars<-Reachmodel(terminal_reaches, 'Terminal', color = colorT)
Terminal_metrics<- GroupModelAICs(terminal_reaches, 'Terminal')
source('E:/Jenn/Documents/VisualFeedback/R/Analysis_Scripts.R')
Terminal_metrics<- GroupModelAICs(terminal_reaches, 'Terminal')
LocalizationModelCompare(terminal_localization, terminal_reaches, colorT)
source('E:/Jenn/Documents/VisualFeedback/R/shared.R')
LocalizationModelCompare(terminal_localization, terminal_reaches, colorT)
source('E:/Jenn/Documents/VisualFeedback/R/Analysis_Scripts.R')
LocalizationModelCompare(terminal_localization, terminal_reaches, colorT)
source('E:/Jenn/Documents/VisualFeedback/R/Analysis_Scripts.R', encoding = 'UTF-8')
LocalizationModelCompare(terminal_localization, terminal_reaches, colorT)
source('E:/Jenn/Documents/VisualFeedback/R/Analysis_Scripts.R', encoding = 'UTF-8')
LocalizationModelCompare(terminal_localization, terminal_reaches, colorT)
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
plotfitPropModel(terminal_reaches, terminal_localization, colorT, 'Terminal Prop Model')
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
plotfitPropModel(terminal_reaches, terminal_localization, colorT, 'Terminal Prop Model')
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
plotfitPropModel(terminal_reaches, terminal_localization, colorT, 'Terminal Prop Model')
plotfitPropModel(passive_reaches, passive_localization, colorT, 'Continuous Prop Model')
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
plotfitPropModel(passive_reaches, passive_localization, colorT, 'Continuous Prop Model')
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
plotfitPropModel(passive_reaches, passive_localization, colorT, 'Continuous Prop Model')
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
plotfitPropModel(passive_reaches, passive_localization, colorT, 'Continuous Prop Model')
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
plotfitPropModel(passive_reaches, passive_localization, colorT, 'Continuous Prop Model')
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
plotfitPropModel(passive_reaches, passive_localization, colorT, 'Continuous Prop Model')
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
RAEPlots(active_reaches, nocursor_reaches[33:320,], nocursorI_reaches[33:320,], nocursor_nocursors, nocursorI_nocursors)
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
RAEPlots(active_reaches, nocursor_reaches[33:320,], nocursorI_reaches[33:320,], nocursor_nocursors, nocursorI_nocursors)
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
RAEPlots(active_reaches, nocursor_reaches[33:320,], nocursorI_reaches[33:320,], nocursor_nocursors, nocursorI_nocursors)
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
RAEPlots(active_reaches, nocursor_reaches[33:320,], nocursorI_reaches[33:320,], nocursor_nocursors, nocursorI_nocursors)
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
RAEPlots(active_reaches, nocursor_reaches[33:320,], nocursorI_reaches[33:320,], nocursor_nocursors, nocursorI_nocursors)
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
RAEPlots(active_reaches, nocursor_reaches[33:320,], nocursorI_reaches[33:320,], nocursor_nocursors, nocursorI_nocursors)
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
RAEPlots(active_reaches, nocursor_reaches[33:320,], nocursorI_reaches[33:320,], nocursor_nocursors, nocursorI_nocursors)
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
Localizations(passive_localization,terminal_localization, exposure_localization)
VisualFeedbackReaches(active_reaches, passive_reaches, terminal_reaches)
plotfitPropModel(exposure_reaches, exposure_localization, colorT, 'Exposure Prop Model')
source('E:/Jenn/Documents/VisualFeedback/R/Analysis_Scripts.R')
fitPropModel(active_reaches, active_localization)
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
source('E:/Jenn/Documents/VisualFeedback/R/Analysis_Scripts.R')
fitPropModel(active_reaches, active_localization)
source('E:/Jenn/Documents/VisualFeedback/R/shared.R')
source('E:/Jenn/Documents/VisualFeedback/R/shared.R')
downloadOSFdata()
loadalldata()
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
plotfitPropModel(exposure_reaches, exposure_localization, colorE, 'Exposure Prop Model', exp = 'exp')
exp = 'exp'
if ('exp' == 'exp') {
print(TRUE)
}
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
plotfitPropModel(exposure_reaches, exposure_localization, colorE, 'Exposure Prop Model', exp = 'exp')
plotfitPropModel(passive_reaches, passive_localization, colorPA, 'Continuous Prop Model')
library("RateRate", lib.loc="~/R/win-library/3.5")
plotfitPropModel(passive_reaches, passive_localization, colorPA, 'Continuous Prop Model')
reachdata<-exposure_reaches
locadata<- exposure_localization
localizations<-rowMeans(locadata[,2:ncol(locadata)], na.rm=TRUE)
if ('exp' == 'exp'){
meanreaches<-rowMeans(reachdata[,2:ncol(reachdata)], na.rm=TRUE)
} else {
meanreaches<-rowMeans(reachdata[241:288,2:ncol(reachdata)], na.rm=TRUE)
}
meanreaches<- meanreaches*-1
reachdata$distortion[241:288]<- as.numeric(meanreaches)
stuff<-reachdata$distortion[241:288]
stuff<-reachdata$distortion[1:241]
distortion<- rbind(stuff,meanreaches)
stuff
remove(stuff)
stuff<-reachdata$distortion[1:241]
View(reachdata)
distortion<- c(rep(0, 64), rep(30, 160), rep (-30,16))
schedule<- c(distortion,meanreaches)
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
plotfitPropModel(exposure_reaches, exposure_localization, colorE, 'Exposure Prop Model', exp = 'exp')
source('E:/Jenn/Documents/VisualFeedback/R/Analysis_Scripts.R')
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
plotpropmodels()
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
plotpropmodels()
output1<-fitPropModel(passive_reaches, passive_localization)
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
plotpropmodels()
output1
localizations<-rowMeans(locadata[,2:ncol(locadata)], na.rm=TRUE)
pargrid <- gridsearch(localizations, schedule, nsteps = 7, topn = 4)
cat('optimize best fits...\n')
for (gridpoint in c(1:nrow(pargrid))) { #for each row
par<-unlist(pargrid[gridpoint,1])
control <- list('maxit'=10000, 'ndeps'=1e-9 )
fit <- optim(par=par, PropModelMSE, gr=NULL, schedule, localizations, control=control, method = "Brent", lower = 0, upper = 1)
optpar<- fit$par
# stick optpar back in pargrid
pargrid[gridpoint,1] <- optpar
pargrid[gridpoint,2]<- fit$value
}
View(pargrid)
bestpar <- order(pargrid[,2])[1]
bestpar
pargrid
order(pargrid[,2])
pargrid[1]
pargrid[order(pargrid[,2])]
pargrid[order(pargrid[,2]),1]
pargrid[1,order(pargrid[,2])]
pargrid[order(pargrid[,2])]
pargrid[order(pargrid[,2])][1]
unlist(pargrid[1])
output<- PropModel(.1597369, schedule)
output2<- PropModel(unlist(pargrid[bestpar]), schedule)
outputl<-fitPropModel(passive_reaches, passive_localization)
outputl<-fitPropModel(passive_reaches, passive_localization, exp = 'con')
output3<-fitPropModel(exposure_reaches, exposure_localization, exp = 'exp')
reachdata<- passive_reaches
locadata<- passive_localization
exp = 'con'
meanreaches<-rowMeans(reachdata[241:288,2:ncol(reachdata)], na.rm=TRUE)
reachdata$distortion[241:288]<- as.numeric(meanreaches)
schedule<- reachdata$distortion
pargrid <- gridsearch(localizations, schedule, nsteps = 7, topn = 4)
cat('optimize best fits...\n')
for (gridpoint in c(1:nrow(pargrid))) { #for each row
par<-unlist(pargrid[gridpoint,1])
control <- list('maxit'=10000, 'ndeps'=1e-9 )
fit <- optim(par=par, PropModelMSE, gr=NULL, schedule, localizations, control=control, method = "Brent", lower = 0, upper = 1)
optpar<- fit$par
# stick optpar back in pargrid
pargrid[gridpoint,1] <- optpar
pargrid[gridpoint,2]<- fit$value
}
output2<- PropModel(unlist(pargrid[bestpar]), schedule)
source('E:/Jenn/Documents/VisualFeedback/R/Analysis_Scripts.R')
output2<-fitPropModel(terminal_reaches, terminal_localization)
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
plotpropmodel()
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
plotpropmodel()
plotpropmodel()
plotpropmodels()
outputl<-fitPropModel(passive_reaches, passive_localization)
output2<-fitPropModel(terminal_reaches, terminal_localization)
output1<-fitPropModel(passive_reaches, passive_localization)
output2<-fitPropModel(terminal_reaches, terminal_localization)
output3<-fitPropModel(exposure_reaches, exposure_localization, exp = 'exp')
plot(output1,
ylim = c(-15, 15),
xlab = "Proportional Model",
lwd = 2,
ylab = "Change in Hand Estimates [°]",
col = colorPA,
axes = FALSE,
main = title,
type = 'l',
cex.lab = 1.5,
cex.main = 1.5
)
axis(
1,
at = c(1, 64, 224, 240, 288),
cex.axis = 1.5,
las = 2
)
axis(2, at = c(-15, -10,-5,0, 5,10,15), cex.axis = 1.5, las = 2)
lines(output2, col = colorT)
lines(output3, col = colorE)
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
source('E:/Jenn/Documents/VisualFeedback/R/shared.R')
source('E:/Jenn/Documents/VisualFeedback/R/Analysis_Scripts.R')
loadalldata()
plotpropmodels()
source('E:/Jenn/Documents/VisualFeedback/R/Analysis_Scripts.R')
plotpropmodels()
loadcolors()
plotpropmodels()
output1<-fitPropModel(passive_reaches, passive_localization)
reachdata<- passive_reaches
locadata<- passive_localization
meanreaches<-rowMeans(reachdata[241:288,2:ncol(reachdata)], na.rm=TRUE)
#meanreaches<- meanreaches*-1
reachdata$distortion[241:288]<- as.numeric(meanreaches)
schedule<- reachdata$distortion
pargrid <- gridsearch(localizations, schedule, nsteps = 7, topn = 4)
cat('optimize best fits...\n')
for (gridpoint in c(1:nrow(pargrid))) { #for each row
par<-unlist(pargrid[gridpoint,1])
control <- list('maxit'=10000, 'ndeps'=1e-9 )
fit <- optim(par=par, PropModelMSE, gr=NULL, schedule, localizations, control=control, method = "Brent", lower = 0, upper = 1)
optpar<- fit$par
# stick optpar back in pargrid
pargrid[gridpoint,1] <- optpar
pargrid[gridpoint,2]<- fit$value
}
#this function will take the dataframe made in the last function (dogridsearch) and use the list of parameters to make a new model then compare to output and get a new mse.
pargrid <- gridsearch(localizations, schedule, nsteps = 7, topn = 4)
localizations<-rowMeans(locadata[,2:ncol(locadata)], na.rm=TRUE)
#this function will take the dataframe made in the last function (dogridsearch) and use the list of parameters to make a new model then compare to output and get a new mse.
pargrid <- gridsearch(localizations, schedule, nsteps = 7, topn = 4)
for (gridpoint in c(1:nrow(pargrid))) { #for each row
par<-unlist(pargrid[gridpoint,1])
control <- list('maxit'=10000, 'ndeps'=1e-9 )
fit <- optim(par=par, PropModelMSE, gr=NULL, schedule, localizations, control=control, method = "Brent", lower = 0, upper = 1)
optpar<- fit$par
# stick optpar back in pargrid
pargrid[gridpoint,1] <- optpar
pargrid[gridpoint,2]<- fit$value
}
output<- PropModel(unlist(pargrid[bestpar]), schedule)
# get lowest MSE, and pars that go with that
bestpar <- order(pargrid[,2])[1]
output<- PropModel(unlist(pargrid[bestpar]), schedule)
source('E:/Jenn/Documents/VisualFeedback/R/Analysis_Scripts.R')
output1<-fitPropModel(passive_reaches, passive_localization)
remove(output1)
output1<-fitPropModel(passive_reaches, passive_localization)
localizations<-rowMeans(locadata[,2:ncol(locadata)], na.rm=TRUE)
if ('exp' == 'exp'){
meanreaches<-rowMeans(reachdata[,2:ncol(reachdata)], na.rm=TRUE)
distortion<- c(rep(0, 64), rep(30, 160), rep (-30,16))
schedule<- c(distortion,meanreaches)
} else {
meanreaches<-rowMeans(reachdata[241:288,2:ncol(reachdata)], na.rm=TRUE)
#meanreaches<- meanreaches*-1
reachdata$distortion[241:288]<- as.numeric(meanreaches)
schedule<- reachdata$distortion
}
loadalldata()
source('E:/Jenn/Documents/VisualFeedback/R/shared.R')
source('R/Analysis_Scripts.R')
source('R/Plots.R')
loadalldata()
loadcolors()
output1<-fitPropModel(passive_reaches, passive_localization)
output1
reachdata<- passive_reaches
locadata<- passive_localization
localizations<-rowMeans(locadata[,2:ncol(locadata)], na.rm=TRUE)
if ('exp' == 'exp'){
meanreaches<-rowMeans(reachdata[,2:ncol(reachdata)], na.rm=TRUE)
distortion<- c(rep(0, 64), rep(30, 160), rep (-30,16))
schedule<- c(distortion,meanreaches)
} else {
meanreaches<-rowMeans(reachdata[241:288,2:ncol(reachdata)], na.rm=TRUE)
#meanreaches<- meanreaches*-1
reachdata$distortion[241:288]<- as.numeric(meanreaches)
schedule<- reachdata$distortion
}
exp = 'con'
if ('exp' == 'exp'){
print(TRUE)
}
exp = 1
if (exp == 2){
print(true)
}
source('E:/Jenn/Documents/VisualFeedback/R/Analysis_Scripts.R')
if (exp == 2){
meanreaches<-rowMeans(reachdata[,2:ncol(reachdata)], na.rm=TRUE)
distortion<- c(rep(0, 64), rep(30, 160), rep (-30,16))
schedule<- c(distortion,meanreaches)
} else {
meanreaches<-rowMeans(reachdata[241:288,2:ncol(reachdata)], na.rm=TRUE)
#meanreaches<- meanreaches*-1
reachdata$distortion[241:288]<- as.numeric(meanreaches)
schedule<- reachdata$distortion
}
pargrid <- gridsearch(localizations, schedule, nsteps = 7, topn = 4)
cat('optimize best fits...\n')
for (gridpoint in c(1:nrow(pargrid))) { #for each row
par<-unlist(pargrid[gridpoint,1])
control <- list('maxit'=10000, 'ndeps'=1e-9 )
fit <- optim(par=par, PropModelMSE, gr=NULL, schedule, localizations, control=control, method = "Brent", lower = 0, upper = 1)
optpar<- fit$par
# stick optpar back in pargrid
pargrid[gridpoint,1] <- optpar
pargrid[gridpoint,2]<- fit$value
}
bestpar <- order(pargrid[,2])[1]
output<- PropModel(unlist(pargrid[bestpar]), schedule)
source('E:/Jenn/Documents/VisualFeedback/R/Analysis_Scripts.R')
source('R/shared.R')
source('R/Plots.R')
source('R/Analysis_Scripts.R')
loadalldata()
loadcolors()
plotpropmodels()
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
plotpropmodels()
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
plotpropmodels()
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
plotpropmodels()
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
plotpropmodels()
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
plotpropmodels()
PlotoutLine(active_reaches, 5:7, 5:7, 'Reaches')
PlotoutLine(active_reaches, 6:7, 5:7, 'Reaches')
PlotoutLine(active_reaches, 6:7, 5:6, 'Reaches')
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
ReachmodelCTs()
legend(0,-15, legend = c('fast','slow','output'))
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
ReachmodelCTs()
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
labels <-
list (
'Active Localization Group (N=32)', #orange
'Passive Localization Group (N=32)', #purple
'Pause Group (N=32)', #steel blue
'No-Cursor Group (N=32)', #blue
'No-Cursor Instructed Group (N=16)', #Green
'Exposure Group (N=32)', #Yellow
'Continous Group (N=32)',
'Terminal Group (N=32)', #Red
'fast',
'slow',
'output',
'Active Localizations (N=32)',
'Passive Localizations (N=32)')
View(labels)
colorlist <- list(colorA, colorNL, colorNC, colorNNC, colorE,colorPA, colorT)
View(colorlist)
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
ReachmodelCTs()
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
ReachmodelCTs()
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
ReachmodelCTs()
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
Localizations(passive_localization,terminal_localization, exposure_localization)
VisualFeedbackReaches(active_reaches, passive_reaches, terminal_reaches)
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
VisualFeedbackReaches(active_reaches, passive_reaches, terminal_reaches)
ReachmodelCTs()
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
VisualFeedbackReaches(active_reaches, passive_reaches, terminal_reaches)
svglite('figs/Visual Feedback_all_figs.svg', width = 8, height = 20, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3,4), nrow = 4), heights = c(2,2,2,2))
VisualFeedbackReaches(active_reaches, passive_reaches, terminal_reaches)
ReachmodelCTs()
Localizations(passive_localization,terminal_localization, exposure_localization)
plotpropmodels()
dev.off()
library("svglite", lib.loc="~/R/win-library/3.5")
svglite('figs/Visual Feedback_all_figs.svg', width = 8, height = 20, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3,4), nrow = 4), heights = c(2,2,2,2))
VisualFeedbackReaches(active_reaches, passive_reaches, terminal_reaches)
ReachmodelCTs()
Localizations(passive_localization,terminal_localization, exposure_localization)
plotpropmodels()
dev.off()
RAEPlots(active_reaches, nocursor_reaches[33:320,], nocursorI_reaches[33:320,], nocursor_nocursors, nocursorI_nocursors)
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
svglite('figs/Visual Feedback_all_figs.svg', width = 8, height = 25, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3,4,5), nrow = 5), heights = c(2,2,2,2,5))
VisualFeedbackReaches(active_reaches, passive_reaches, terminal_reaches)
ReachmodelCTs()
Localizations(passive_localization,terminal_localization, exposure_localization)
plotpropmodels()
RAEPlots(active_reaches, nocursor_reaches[33:320,], nocursorI_reaches[33:320,], nocursor_nocursors, nocursorI_nocursors)
dev.off()
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
svglite('figs/Visual Feedback_all_figs.svg', width = 8, height = 25, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3,4,5), nrow = 5), heights = c(2,2,2,2,2))
VisualFeedbackReaches(active_reaches, passive_reaches, terminal_reaches)
ReachmodelCTs()
Localizations(passive_localization,terminal_localization, exposure_localization)
plotpropmodels()
RAEPlots(active_reaches, nocursor_reaches[33:320,], nocursorI_reaches[33:320,], nocursor_nocursors, nocursorI_nocursors)
dev.off()
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
RAEPlots(active_reaches, nocursor_reaches[33:320,], nocursorI_reaches[33:320,], nocursor_nocursors, nocursorI_nocursors)
svglite('figs/Visual Feedback_all_figs.svg', width = 8, height = 25, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3,4,5), nrow = 5), heights = c(2,2,2,2,2))
VisualFeedbackReaches(active_reaches, passive_reaches, terminal_reaches)
ReachmodelCTs()
Localizations(passive_localization,terminal_localization, exposure_localization)
plotpropmodels()
RAEPlots(active_reaches, nocursor_reaches[33:320,], nocursorI_reaches[33:320,], nocursor_nocursors, nocursorI_nocursors)
dev.off()
source('E:/Jenn/Documents/VisualFeedback/R/Analysis_Scripts.R')
fitPropModel(passive_reaches, passive_localization)
fitPropModel(terminal_reaches, terminal_localization)
fitPropModel(exposure_reaches, exposure_localization, exp = 2)
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
source('E:/Jenn/Documents/VisualFeedback/R/Analysis_Scripts.R')
svglite('figs/Visual Feedback_Poster_figs.svg', width = 8, height = 25, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3,4,5), nrow = 5), heights = c(2,2,2,2,2))
VisualFeedbackReaches(active_reaches, passive_reaches, terminal_reaches)
ReachmodelCTs()
Localizations(passive_localization,terminal_localization, exposure_localization)
plotpropmodels()
RAEPlots(active_reaches, nocursor_reaches[33:320,], nocursorI_reaches[33:320,], nocursor_nocursors, nocursorI_nocursors)
dev.off()
library("RateRate", lib.loc="~/R/win-library/3.5")
library("svglite", lib.loc="~/R/win-library/3.5")
svglite('figs/Visual Feedback_Poster_figs.svg', width = 8, height = 25, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3,4,5), nrow = 5), heights = c(2,2,2,2,2))
VisualFeedbackReaches(active_reaches, passive_reaches, terminal_reaches)
ReachmodelCTs()
Localizations(passive_localization,terminal_localization, exposure_localization)
plotpropmodels()
RAEPlots(active_reaches, nocursor_reaches[33:320,], nocursorI_reaches[33:320,], nocursor_nocursors, nocursorI_nocursors)
dev.off()
PassivePars<-Reachmodel(passive_reaches, 'Passive', color = colorPA)
TerminalPars<-Reachmodel(terminal_reaches, 'Terminal', color = colorT)
NoCPars<-Reachmodel(nocursor_reaches[33:320,], 'No-Cursor', color = colorNC)
NoCIPars<-Reachmodel(nocursorI_reaches[33:320,], 'No-Cursor', grid = 'skewed', color = colorNNC)
Passive_metrics<- GroupModelAICs(passive_reaches, 'Passive')
Terminal_metrics<- GroupModelAICs(terminal_reaches, 'Terminal')
NC_metrics<- GroupModelAICs(nocursor_reaches, 'No-Cursor', 'skewed')
NCI_metrics<- GroupModelAICs(nocursorI_reaches,'No-Cursor_I', 'skewed')
LocalizationModelCompare(passive_localization, passive_reaches, colorPA)
LocalizationModelCompare(active_localization, active_reaches, colorA)
LocalizationModelCompare(terminal_localization, terminal_reaches, colorT)
View(Terminal_metrics)
getreachesformodel(exposure_reaches)
fitPropModel(exposure_localization, exposure_reaches, exp = 2)
source('E:/Jenn/Documents/VisualFeedback/R/Analysis_Scripts.R')
ExpoLocalizationModelCompare(exposure_localization, exposure_reaches, colorE)
ExpoLocalizationModelCompare(exposure_localization, exposure_reaches, colorE)
source('E:/Jenn/Documents/VisualFeedback/R/Analysis_Scripts.R')
ExpoLocalizationModelCompare(exposure_localization, exposure_reaches, colorE)
source('E:/Jenn/Documents/VisualFeedback/R/Analysis_Scripts.R')
ExpoLocalizationModelCompare(exposure_localization, exposure_reaches, colorE)
Passive_PropMetrics<-LocalizationModelCompare(passive_localization, passive_reaches, colorPA)
Terminal_PropMetrics<-LocalizationModelCompare(terminal_localization, terminal_reaches, colorT)
source('E:/Jenn/Documents/VisualFeedback/R/Analysis_Scripts.R')
Terminal_PropMetrics<-LocalizationModelCompare(terminal_localization, terminal_reaches, colorT)
View(Terminal_PropMetrics)
