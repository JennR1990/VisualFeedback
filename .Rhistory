plotpropmodels()
plotpassiveproppoints()
dev.off()
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
Localizations1(passive_localization, terminal_localization, exposure_localization)
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
Localizations1(passive_localization, terminal_localization, exposure_localization)
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
Localizations1(passive_localization, terminal_localization, exposure_localization)
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
layout(matrix(c(1,2,3,3,4,5), nrow = 2, byrow = TRUE), heights = c(2,1,2))
neuromatchReaches()
RegressionPLot()
Localizations1(passive_localization, terminal_localization, exposure_localization)
plotpropmodels()
plotpassiveproppoints()
layout(matrix(c(1,2,3,3,4,5), nrow = 3, byrow = TRUE), heights = c(2,1,2))
neuromatchReaches()
RegressionPLot()
Localizations1(passive_localization, terminal_localization, exposure_localization)
plotpropmodels()
plotpassiveproppoints()
svglite('figs/Manuscript Figures.svg', width = 12, height = 8, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3,3,4,5), nrow = 3, byrow = TRUE), heights = c(2,2,2))
neuromatchReaches()
RegressionPLot()
Localizations1(passive_localization, terminal_localization, exposure_localization)
plotpropmodels()
plotpassiveproppoints()
dev.off()
svglite('figs/Manuscript Figures.svg', width = 8, height = 12, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3,3,4,5), nrow = 3, byrow = TRUE), heights = c(2,2,2))
neuromatchReaches()
RegressionPLot()
Localizations1(passive_localization, terminal_localization, exposure_localization)
plotpropmodels()
plotpassiveproppoints()
dev.off()
source('R/shared.R')
source('R/Plots.R')
source('R/Analysis_Scripts.R')
source('R/asymptoticDecayModel_terminal.R')
loadalldata()
source('E:/Jenn/Documents/VisualFeedback/R/shared.R')
source('E:/Jenn/Documents/VisualFeedback/R/shared.R')
loadalldata()
loadcolors()
Reachmodel(passive_reaches, 'Passive', condition = 'loc', loc_data = passive_localization, color = colorPA)
Reachmodel(terminal_reaches, 'Terminal', condition = 'loc', loc_data = terminal_localization, color = colorT)
neuromatchReaches()
source('R/shared.R')
source('R/Figures.R')
source('R/Analysis.R')
source('R/asymptoticDecayModel_terminal.R')
loadalldata()
loadcolors()
Reachmodel(passive_reaches, 'Passive', condition = 'loc', loc_data = passive_localization, color = colorPA)
Reachmodel(terminal_reaches, 'Terminal', condition = 'loc', loc_data = terminal_localization, color = colorT)
neuromatchReaches()
RegressionPLot()
source('R/Repeated_Measures_Combine.R')
neuromatchReaches()
RegressionPLot()
Localizations1(passive_localization, terminal_localization, exposure_localization)
Localizations(passive_localization, terminal_localization, exposure_localization)
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
Localizations(passive_localization, terminal_localization, exposure_localization)
neuromatchReaches()
plotpassiveproppoints()
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
plotpassiveproppoints()
ANOVAdata<- PrepdataforANOVA(passive_reaches,terminal_reaches)
ReachANOVA<-ANOVAanalysis(ANOVAdata)
ReachANOVA
Ttestdata<- PrepdataforT(passive_reaches,terminal_reaches)
Rebounds<- PrepANOVARebounds(passive_reaches,terminal_reaches,exposure_reaches)
Implicit<-Reboundanalysis(Rebounds)
Implicit
Implicit
ANOVAPdata<- PrepdataforPropANOVA(passive_localization, terminal_localization, exposure_localization)
TtestPdata<- PrepdataforPropT(passive_localization, terminal_localization, exposure_localization)
LocANOVA<-ANOVAanalysis(ANOVAPdata)
LocANOVA
##Reach Model Comparison
Passive_metrics<- GroupModelAICs(passive_reaches, 'Passive')
Terminal_metrics<- GroupModelAICs(terminal_reaches, 'Terminal')
Runlogregression()
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel_terminal.R')
bootstrapSemiAsymptoticDecayModels()
getAsymptoticDecayParameterCIs()
getSaturationTrials()
source('E:/Jenn/Documents/VisualFeedback/R/asymptoticDecayModel_terminal.R')
bootstrapSemiAsymptoticDecayModels()
getAsymptoticDecayParameterCIs()
getSaturationTrials()
svglite('figs/Manuscript Figures.svg', width = 8, height = 12, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3), nrow = 2, byrow = TRUE), heights = c(2,2))
neuromatchReaches()
Localizations(passive_localization, terminal_localization, exposure_localization)
plotpassiveproppoints()
dev.off()
layout(matrix(c(1,0,3,4), nrow = 2, byrow = TRUE), heights = c(2,2))
neuromatchReaches()
Localizations(passive_localization, terminal_localization, exposure_localization)
plotpassiveproppoints()
svglite('figs/Manuscript Figures.svg', width = 8, height = 12, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3,4), nrow = 2, byrow = TRUE), heights = c(2,2))
neuromatchReaches()
Localizations(passive_localization, terminal_localization, exposure_localization)
plotpassiveproppoints()
dev.off()
svglite('figs/Manuscript Figures.svg', width = 8, height = 8, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3,4), nrow = 2, byrow = TRUE), heights = c(2,2))
neuromatchReaches()
Localizations(passive_localization, terminal_localization, exposure_localization)
plotpassiveproppoints()
dev.off()
svglite('figs/Manuscript Figures.svg', width = 12, height = 8, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3,4), nrow = 2, byrow = TRUE), heights = c(2,2))
neuromatchReaches()
Localizations(passive_localization, terminal_localization, exposure_localization)
plotpassiveproppoints()
dev.off()
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
svglite('figs/Manuscript Figures.svg', width = 12, height = 8, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3,4), nrow = 2, byrow = TRUE), heights = c(2,2))
neuromatchReaches()
Localizations(passive_localization, terminal_localization, exposure_localization)
plotpassiveproppoints()
dev.off()
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
svglite('figs/Manuscript Figures.svg', width = 12, height = 8, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3,4), nrow = 2, byrow = TRUE), heights = c(2,2))
neuromatchReaches()
Localizations(passive_localization, terminal_localization, exposure_localization)
plotpassiveproppoints()
dev.off()
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
svglite('figs/Manuscript Figures.svg', width = 12, height = 8, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3,4), nrow = 2, byrow = TRUE), heights = c(2,2))
neuromatchReaches()
Localizations(passive_localization, terminal_localization, exposure_localization)
plotpassiveproppoints()
dev.off()
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
svglite('figs/Manuscript Figures.svg', width = 12, height = 8, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3,4), nrow = 2, byrow = TRUE), heights = c(2,2))
neuromatchReaches()
neuromatchReaches()
Localizations(passive_localization, terminal_localization, exposure_localization)
plotpassiveproppoints()
dev.off()
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
svglite('figs/Manuscript Figures.svg', width = 12, height = 8, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3,4), nrow = 2, byrow = TRUE), heights = c(2,2))
neuromatchReaches()
neuromatchReaches()
Localizations(passive_localization, terminal_localization, exposure_localization)
plotpassiveproppoints()
dev.off()
source('R/shared.R')
loadalldata()
source('E:/Jenn/Documents/VisualFeedback/R/shared.R')
downloadOSFdata()
loadalldata()
source('R/Figures.R')
neuromatchReaches()
library(RateRate)
neuromatchReaches()
Localizations(passive_localization, terminal_localization, exposure_localization)
Reachmodel(newnocursor_reaches, 'No-Cursor', grid = 'skewed', condition = 'nc', ncdata = newnocursor_nocursors, color = colorNC, yaxis = 'Hand Direction [°]')
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
Reachmodel(newnocursor_reaches, 'No-Cursor', grid = 'skewed', condition = 'nc', ncdata = newnocursor_nocursors, color = colorNC, yaxis = 'Hand Direction [°]')
plotvariation<- function (){
g<- seq(from = 50, to = 480, by = 12)
g<- c(1,g,480)
for (i in 1:length(sizes)){
if (is.na(sizes[i])){
sizes[i]<- 0
}
}
plot(NULL, col = 'white', axes = F,cex.lab = 1.5,
cex.main = 1.5,    xlab = "Trial",
ylab = "Hand Location [°]", ylim = c(-30, 30), xlim = c(1,480))
lines(x = z[1:25], y = sizes[1:25], type = 'l')
lines(x = z[25:26], y = c(0,0), lty = 2)
lines(x = z[26:33], y = sizes[26:33], type = 'l')
lines(x = z[33:36], y = c(0,0,0,0), lty = 2)
lines(x = z[36:51], y = sizes[36:51], type = 'l')
lines(x = z[51:52], y = c(0,0), lty = 2)
lines(x = z[52:61], y = sizes[52:61], type = 'l')
lines(x = z[61:62], y = c(0,0), lty = 2)
lines(x = z[62:71], y = sizes[62:71], type = 'l')
lines(x = z[71:72], y = c(0,0), lty = 2)
lines(x = z[73:74], y = sizes[73:74], type = 'l')
legend(
-5,
30,
legend = c(
'Reaches',
'Localizations'),
col = c('blue', 'red'),
lty = c(1),
lwd = c(2),
bty = 'n',
cex = 1.25
)
axis(2, at = c(-30, -15, 0, 15, 30), cex.axis = 1.5,
las = 2)
axis(1, at = g, cex.axis = .75, las = 2)
reachdata<- getreachesformodel(variation_reaches)
lines(reachdata$meanreaches*-1, type = 'l', col = 'Blue')
locdata<- getreachesformodel(variation_localization)
lines(locdata$meanreaches, type = 'l', col = 'red')
dataCIs <- trialCI(data = variation_localization)
dataCIs <- dataCIs
x <-  c(c(1:480), rev(c(1:480)))
y <- c(dataCIs[, 1], rev(dataCIs[, 2]))
polygon(x, y, col = rgb(1,0,0,.2), border = NA)
dataCIs <- trialCI(data = variation_reaches)
dataCIs <- dataCIs*-1
x <-  c(c(1:480), rev(c(1:480)))
y <- c(dataCIs[, 1], rev(dataCIs[, 2]))
polygon(x, y, col = rgb(0,0,1,.2), border = NA)
}
plotvariation()
source('E:/Jenn/Documents/VisualFeedback/R/variationmeans.r', encoding = 'UTF-8')
makingschedule<- function (){
vprop<- Getshiftsperrotation()
vreac<- Getreachesperrotation()
localizations<-vprop$localizations
Variation_means<- cbind(vreac,localizations)
g<- seq(from = 50, to = 480, by = 12)
h<- seq(from = 61, to = 481, by = 12)
h[36]<- h[36]-2
z<-c(0,50)
for (i in 1:36) {
z<<- c(z, g[i], h[i]+1)
}
sizes<- c(0,0)
for (i in 1:36){
sizes<<- c(sizes,Variation_means$rotation[i],Variation_means$rotation[i])
}
}
sizes
makingschedule()
VR_Data<- Getshiftsperrotation()
VP_Data<- getreachesformodel(variation_localization)
source('E:/Jenn/Documents/VisualFeedback/R/variationmeans.r', encoding = 'UTF-8')
Getshiftsperrotation()
source('E:/Jenn/Documents/VisualFeedback/R/variationmeans.r', encoding = 'UTF-8')
makingschedule()
vprop<- Getshiftsperrotation()
vreac<- Getreachesperrotation()
localizations<-vprop$localizations
Variation_means<- cbind(vreac,localizations)
g<- seq(from = 50, to = 480, by = 12)
h<- seq(from = 61, to = 481, by = 12)
View(Variation_means)
h
z<-c(0,50)
for (i in 1:36) {
z<<- c(z, g[i], h[i]+1)
}
sizes<- c(0,0)
for (i in 1:36){
sizes<<- c(sizes,Variation_means$rotation[i],Variation_means$rotation[i])
}
View(variation_reaches)
variation_reaches[variation_reaches$rotation == 360]<- NA
##Finds out which places have the NAs so we can use that info for making the perturbation schedule
v<- NA
counter<- 1
g<- c()
for (i in 1:length(sizes)){
if (is.na(sizes[i])){
print(i)
g[counter]<-i
v<- c(v,z[i])
counter<-counter+1
}
}
v<- v[-1]
sizes
variation_reaches[variation_reaches$rotation == 360]<- NA
##Finds out which places have the NAs so we can use that info for making the perturbation schedule
v<- NA
counter<- 1
makingschedule()
source('E:/Jenn/Documents/VisualFeedback/R/variationmeans.r', encoding = 'UTF-8')
sizes<-makingschedule()
vprop<- Getshiftsperrotation()
vreac<- Getreachesperrotation()
localizations<-vprop$localizations
Variation_means<- cbind(vreac,localizations)
g<- seq(from = 50, to = 480, by = 12)
h<- seq(from = 61, to = 481, by = 12)
h[36]<- h[36]-2
z<-c(0,50)
for (i in 1:36) {
z<<- c(z, g[i], h[i]+1)
}
sizes<- c(0,0)
for (i in 1:36){
sizes<<- c(sizes,Variation_means$rotation[i],Variation_means$rotation[i])
}
sizes
sizes[sizes == 360] <- NA
sizes[sizes == 360] <- NA
sizes
source('E:/Jenn/Documents/VisualFeedback/R/variationmeans.r', encoding = 'UTF-8')
source('E:/Jenn/Documents/VisualFeedback/R/variationmeans.r', encoding = 'UTF-8')
makingschedule()
vprop<- Getshiftsperrotation()
vreac<- Getreachesperrotation()
localizations<-vprop$localizations
Variation_means<- cbind(vreac,localizations)
g<- seq(from = 50, to = 480, by = 12)
h<- seq(from = 61, to = 481, by = 12)
h[36]<- h[36]-2
z<-c(0,50)
for (i in 1:36) {
z<<- c(z, g[i], h[i]+1)
}
sizes<- c(0,0)
for (i in 1:36){
sizes<<- c(sizes,Variation_means$rotation[i],Variation_means$rotation[i])
sizes[sizes == 360] <- NA
}
source('E:/Jenn/Documents/VisualFeedback/R/variationmeans.r', encoding = 'UTF-8')
makingschedule()
sizes<-makingschedule()
source('E:/Jenn/Documents/VisualFeedback/R/variationmeans.r', encoding = 'UTF-8')
source('E:/Jenn/Documents/VisualFeedback/R/variationmeans.r', encoding = 'UTF-8')
createschedule()
source('E:/Jenn/Documents/VisualFeedback/R/variationmeans.r', encoding = 'UTF-8')
plotvariation()
vprop<- Getshiftsperrotation()
vreac<- Getreachesperrotation()
localizations<-vprop$localizations
Variation_means<- cbind(vreac,localizations)
g<- seq(from = 50, to = 480, by = 12)
h<- seq(from = 61, to = 481, by = 12)
h[36]<- h[36]-2
z<-c(0,50)
for (i in 1:36) {
z<<- c(z, g[i], h[i]+1)
}
sizes<- c(0,0)
for (i in 1:36){
sizes<<- c(sizes,Variation_means$rotation[i],Variation_means$rotation[i])
sizes[sizes == 360] <- NA
}
source('E:/Jenn/Documents/VisualFeedback/R/variationmeans.r', encoding = 'UTF-8')
plotvariation()
source('E:/Jenn/Documents/VisualFeedback/R/variationmeans.r', encoding = 'UTF-8')
source('E:/Jenn/Documents/VisualFeedback/R/shared.R')
source('R/shared.R')
source('R/Figures.R')
loadalldata()
Getshiftsperrotation<- function() {
g<- seq(from = 50, to = 480, by = 12)
h<- seq(from = 61, to = 481, by = 12)
h[36]<- h[36]-1
rotation<- c()
localizations<- c()
VP_Data<- getreachesformodel(variation_localization)
for (i in 1:length(g)) {
localizations[i]<- mean(VP_Data$meanreaches[g[i]:h[i]], na.rm = TRUE)
rotation[i]<- variation_reaches$distortion[g[i]]
}
return(variation_prop<- data.frame(rotation, localizations))
}
Getreachesperrotation<- function() {
g<- seq(from = 50, to = 480, by = 12)
h<- seq(from = 61, to = 481, by = 12)
h[36]<- h[36]-1
rotation<- c()
stuff<- c()
VR_Data<- getreachesformodel(variation_reaches)
for (i in 1:length(g)) {
stuff[i]<- mean(VR_Data$meanreaches[g[i]:h[i]], na.rm = TRUE)
rotation[i]<- variation_reaches$distortion[g[i]]
}
return(variation_reach<- data.frame(rotation, stuff))
}
plotvariation<- function (){
vprop<- Getshiftsperrotation()
vreac<- Getreachesperrotation()
localizations<-vprop$localizations
Variation_means<- cbind(vreac,localizations)
g<- seq(from = 50, to = 480, by = 12)
h<- seq(from = 61, to = 481, by = 12)
h[36]<- h[36]-2
z<-c(0,50)
for (i in 1:36) {
z<- c(z, g[i], h[i]+1)
}
sizes<- c(0,0)
for (i in 1:36){
sizes<- c(sizes,Variation_means$rotation[i],Variation_means$rotation[i])
sizes[sizes == 360] <- NA
}
g<- seq(from = 50, to = 480, by = 12)
g<- c(1,g,480)
for (i in 1:length(sizes)){
if (is.na(sizes[i])){
sizes[i]<- 0
}
}
plot(NULL, col = 'white', axes = F,cex.lab = 1.5,
cex.main = 1.5,    xlab = "Trial",
ylab = "Hand Location [°]", ylim = c(-30, 30), xlim = c(1,480))
lines(x = z[1:25], y = sizes[1:25], type = 'l')
lines(x = z[25:26], y = c(0,0), lty = 2)
lines(x = z[26:33], y = sizes[26:33], type = 'l')
lines(x = z[33:36], y = c(0,0,0,0), lty = 2)
lines(x = z[36:51], y = sizes[36:51], type = 'l')
lines(x = z[51:52], y = c(0,0), lty = 2)
lines(x = z[52:61], y = sizes[52:61], type = 'l')
lines(x = z[61:62], y = c(0,0), lty = 2)
lines(x = z[62:71], y = sizes[62:71], type = 'l')
lines(x = z[71:72], y = c(0,0), lty = 2)
lines(x = z[73:74], y = sizes[73:74], type = 'l')
legend(
-5,
30,
legend = c(
'Reaches',
'Localizations'),
col = c('blue', 'red'),
lty = c(1),
lwd = c(2),
bty = 'n',
cex = 1.25
)
axis(2, at = c(-30, -15, 0, 15, 30), cex.axis = 1.5,
las = 2)
axis(1, at = g, cex.axis = .75, las = 2)
reachdata<- getreachesformodel(variation_reaches)
lines(reachdata$meanreaches*-1, type = 'l', col = 'Blue')
locdata<- getreachesformodel(variation_localization)
lines(locdata$meanreaches, type = 'l', col = 'red')
dataCIs <- trialCI(data = variation_localization)
dataCIs <- dataCIs
x <-  c(c(1:480), rev(c(1:480)))
y <- c(dataCIs[, 1], rev(dataCIs[, 2]))
polygon(x, y, col = rgb(1,0,0,.2), border = NA)
dataCIs <- trialCI(data = variation_reaches)
dataCIs <- dataCIs*-1
x <-  c(c(1:480), rev(c(1:480)))
y <- c(dataCIs[, 1], rev(dataCIs[, 2]))
polygon(x, y, col = rgb(0,0,1,.2), border = NA)
}
plotvariation()
source('E:/Jenn/Documents/VisualFeedback/R/variationmeans.r', encoding = 'UTF-8')
library(svglite)
svglite('figs/NCM_2021_figs.svg', width = 12, height = 8, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3,4), nrow = 2, byrow = TRUE), heights = c(2,2))
Reachmodel(newnocursor_reaches, 'No-Cursor', grid = 'skewed', condition = 'nc', ncdata = newnocursor_nocursors, color = colorNC, yaxis = 'Hand Direction [°]')
source('E:/Jenn/Documents/VisualFeedback/R/shared.R')
Reachmodel(newnocursor_reaches, 'No-Cursor', grid = 'skewed', condition = 'nc', ncdata = newnocursor_nocursors, color = colorNC, yaxis = 'Hand Direction [°]')
colorNC == colorNC
loadcolors()
svglite('figs/NCM_2021_figs.svg', width = 12, height = 8, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3,4), nrow = 2, byrow = TRUE), heights = c(2,2))
Reachmodel(newnocursor_reaches, 'No-Cursor', grid = 'skewed', condition = 'nc', ncdata = newnocursor_nocursors, color = colorNC, yaxis = 'Hand Direction [°]')
neuromatchReaches()
Localizations(passive_localization, terminal_localization, exposure_localization)
plotvariation()
dev.off()
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
Reachmodel(newnocursor_reaches, 'No-Cursor', grid = 'skewed', condition = 'nc', ncdata = newnocursor_nocursors, color = colorNC, yaxis = 'Hand Direction [°]')
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
Reachmodel(newnocursor_reaches, 'No-Cursor', grid = 'skewed', condition = 'nc', ncdata = newnocursor_nocursors, color = colorNC, yaxis = 'Hand Direction [°]')
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
Reachmodel(newnocursor_reaches, 'No-Cursor', grid = 'skewed', condition = 'nc', ncdata = newnocursor_nocursors, color = colorNC, yaxis = 'Hand Direction [°]')
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
svglite('figs/NCM_2021_figs.svg', width = 12, height = 8, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3,4), nrow = 2, byrow = TRUE), heights = c(2,2))
Reachmodel(newnocursor_reaches, 'No-Cursor', grid = 'skewed', condition = 'nc', ncdata = newnocursor_nocursors, color = colorNC, yaxis = 'Hand Direction [°]')
neuromatchReaches()
Localizations(passive_localization, terminal_localization, exposure_localization)
plotvariation()
dev.off()
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
svglite('figs/NCM_2021_figs.svg', width = 12, height = 8, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3,4), nrow = 2, byrow = TRUE), heights = c(2,2))
Reachmodel(newnocursor_reaches, 'No-Cursor', grid = 'skewed', condition = 'nc', ncdata = newnocursor_nocursors, color = colorNC, yaxis = 'Hand Direction [°]')
neuromatchReaches()
Localizations(passive_localization, terminal_localization, exposure_localization)
plotvariation()
dev.off()
source('E:/Jenn/Documents/VisualFeedback/R/variationmeans.r', encoding = 'UTF-8')
svglite('figs/NCM_2021_figs.svg', width = 12, height = 8, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3,4), nrow = 2, byrow = TRUE), heights = c(2,2))
Reachmodel(newnocursor_reaches, 'No-Cursor', grid = 'skewed', condition = 'nc', ncdata = newnocursor_nocursors, color = colorNC, yaxis = 'Hand Direction [°]')
neuromatchReaches()
Localizations(passive_localization, terminal_localization, exposure_localization)
plotvariation()
dev.off()
source('E:/Jenn/Documents/VisualFeedback/R/Figures.R', encoding = 'UTF-8')
svglite('figs/NCM_2021_figs.svg', width = 12, height = 8, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3,4), nrow = 2, byrow = TRUE), heights = c(2,2))
Reachmodel(newnocursor_reaches, 'No-Cursor', grid = 'skewed', condition = 'nc', ncdata = newnocursor_nocursors, color = colorNC, yaxis = 'Hand Direction [°]')
neuromatchReaches()
Localizations(passive_localization, terminal_localization, exposure_localization)
plotvariation()
dev.off()
neuromatchReaches()
