lines(reach_model$total * -1, col = unlist(colors[2]),lty = 4)
lines(reach_model$slow * -1, col = unlist(colors[2]),lty = 2)
lines(reach_model$fast * -1, col = unlist(colors[2]),lty = 3)
ncreaches <- getreachesformodel(ncdata2)
lines(x = 33:288, y = ncreaches$meanreaches * -1, col = colorNNC)
}
fi3outLine(nocursor_reaches,1:6, 1:2, ' Reach Aftereffects', nocursorI_reaches, grid = 'skewed', nocursor_nocursors, nocursorI_nocursors)
plotfitPropModel(passive_reaches, passive_localization, colorPA, 'Passive Localizations')
plotpropmodels()
plotpropmodels()
fitPropModel(active_reaches, active_localization)
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
plotpropmodels()
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
plotpropmodels()
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
plotpropmodels()
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
plotpropmodels()
ExposureDatas(exposure_localization, exposure_reaches)
plotpropmodels()
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
plotpropmodels()
layout(matrix(c(1,1,2,2,3,3,4,4,5,6,0,0), nrow=2, byrow=TRUE) )
Reachmodel(data = active_reaches, name =  "Active", condition = "loc", loc_data = active_localization, color = colorA)
Reachmodel(data = passive_reaches, name =  "Passive", condition = "loc", loc_data = passive_localization, color = colorPA)
Reachmodel(data = terminal_reaches, name =  "Terminal", condition = "loc", loc_data = terminal_localization, color = colorT)
ExposureDatas(exposure_localization, exposure_reaches)
plotpropmodels()
layout(matrix(c(1,1,0,0,0,0,0,0,0,0,0), nrow=2, byrow=TRUE) )
Reachmodel(data = newnocursor_reaches, name =  "No-Cursor", condition = "nc", ncdata = newnocursor_nocursors, color = colorNC)
layout(matrix(c(1,1,0,0,0,0,0,0,0,0,0), nrow=2, byrow=TRUE) )
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
Reachmodel(data = newnocursor_reaches, name =  "No-Cursor", condition = "nc", ncdata = newnocursor_nocursors, color = colorNC)
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
Reachmodel(data = newnocursor_reaches, name =  "No-Cursor", condition = "nc", ncdata = newnocursor_nocursors, color = colorNC)
legend(
x =-20,3,
legend = c('Reach data', 'No-cursor data', 'model', 'fast', 'slow'),
col = c(
rgb(0.44, 0.51, 0.57),
color,
color,
color,
color
),
lty = c(1, 1, 4, 3, 2),
lwd = c(2, 2, 2, 2, 2),
bty = 'n',
ncol = 2,
cex = 1.5
)
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
Reachmodel(data = newnocursor_reaches, name =  "No-Cursor", condition = "nc", ncdata = newnocursor_nocursors, color = colorNC)
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
Reachmodel(data = newnocursor_reaches, name =  "No-Cursor", condition = "nc", ncdata = newnocursor_nocursors, color = colorNC)
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
plotfitPropModel(active_reaches, active_localization, colorA, "Active")
plotfitPropModel(active_reaches, active_localization, colorA, "Active", exp = "exp")
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
plotfitPropModel(active_reaches, active_localization, colorA, "Active")
locdata<- active_localization
reachdata<- active_reaches
localizations<-rowMeans(locadata[,2:ncol(locadata)], na.rm=TRUE)
locadata<- active_localization
localizations<-rowMeans(locadata[,2:ncol(locadata)], na.rm=TRUE)
meanreaches<-rowMeans(reachdata[,2:ncol(reachdata)], na.rm=TRUE)
distortion<- c(rep(0, 64), rep(30, 160), rep (-30,16))
schedule<- c(distortion,meanreaches)
#this function will take the dataframe made in the last function (dogridsearch) and use the list of parameters to make a new model then compare to output and get a new mse.
pargrid <- gridsearch(localizations, schedule, nsteps = 7, topn = 4)
#this function will take the dataframe made in the last function (dogridsearch) and use the list of parameters to make a new model then compare to output and get a new mse.
pargrid <- gridsearch(localizations, distortion, nsteps = 7, topn = 4)
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
#this function will take the dataframe made in the last function (dogridsearch) and use the list of parameters to make a new model then compare to output and get a new mse.
pargrid <- gridsearch(localizations, distortion, nsteps = 7, topn = 4)
schedule<- c(distortion,meanreaches)
localizations<-rowMeans(locadata[,2:ncol(locadata)], na.rm=TRUE)
clampreaches<-rowMeans(reachdata[241:288,2:ncol(reachdata)], na.rm=TRUE)
clampreaches<- clampreaches*-1
distortion<- c(rep(0, 64), rep(30, 160), rep (-30,16))
schedule<- c(distortion,clampreaches)
#this function will take the dataframe made in the last function (dogridsearch) and use the list of parameters to make a new model then compare to output and get a new mse.
pargrid <- gridsearch(localizations, schedule, nsteps = 7, topn = 4)
for (gridpoint in c(1:nrow(pargrid))) { #for each row
par<-unlist(pargrid[gridpoint,1])
control <- list('maxit'=10000, 'ndeps'=1e-9 )
fit <- optim(par=par, PropModelMSE, gr=NULL, schedule, localizations, control=control, method = "Brent", lower = 0, upper = 1)
optpar<- fit$par
# stick optpar back in pargrid
pargrid[gridpoint,1] <- optpar
pargrid[gridpoint,2]<- fit$value
}
# get lowest MSE, and pars that go with that
bestpar <- order(pargrid[,2])[1]
plot(localizations, type = 'l',  ylim = c(-15,15), axes = FALSE, main = title, ylab = 'Change in Hand Localizations [°]', xlab = "Trial", col = color, cex.lab = 1.5, cex.main = 1.5)
title = "Active"
plot(localizations, type = 'l',  ylim = c(-15,15), axes = FALSE, main = title, ylab = 'Change in Hand Localizations [°]', xlab = "Trial", col = color, cex.lab = 1.5, cex.main = 1.5)
axis(
1,
at = c(1, 64, 224, 240, 288),
cex.axis = 1.5,
las = 2
)
axis(2, at = c(-15, -10,-5,0, 5,10,15), cex.axis = 1.5, las = 2)
output<- PropModel(unlist(pargrid[bestpar]), schedule)
lines(output, col = 'black')
#lines(localizations, col = color)
proportion<- sprintf('Proportion = %f', unlist(pargrid[bestpar]))
print(proportion)
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
fitPropModel(active_reaches, active_localization)
fitPropModel(active_reaches, active_localization)
fitPropModel(active_reaches, active_localization)
source('E:/Jenn/Documents/VisualFeedback/R/Analysis_Scripts.R', encoding = 'UTF-8')
source('E:/Jenn/Documents/VisualFeedback/R/Analysis_Scripts.R', encoding = 'UTF-8')
fitPropModel(active_reaches, active_localization)
apm<-fitPropModel(active_reaches, active_localization)
lines(apm, color = "Green")
lines(apm, col = "green"
lines(apm, col = "green")
lines(apm)
lines(apm, col = "red")
lines(apm*-1, col = "red")
fitPropModel(active_reaches, active_localization)
fitPropModel(active_reaches, active_localization)
plot(localizations, type = 'l',  ylim = c(-15,15), axes = FALSE, main = title, ylab = 'Change in Hand Localizations [°]', xlab = "Trial", col = color, cex.lab = 1.5, cex.main = 1.5)
plotfitPropModel(active_reaches, active_localization, colorA, "Active")
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
plotfitPropModel(active_reaches, active_localization, colorA, "Active")
apm<-fitPropModel(active_reaches, active_localization)
localizations<-rowMeans(locadata[,2:ncol(locadata)], na.rm=TRUE)
exp = 1
if (exp == 2){
meanreaches<-rowMeans(reachdata[,2:ncol(reachdata)], na.rm=TRUE)
distortion<- c(rep(0, 64), rep(30, 160), rep (-30,16))
schedule<- c(distortion,meanreaches)
} else {
meanreaches<-rowMeans(reachdata[241:288,2:ncol(reachdata)], na.rm=TRUE)
#meanreaches<- meanreaches*-1
reachdata$distortion[241:288]<- as.numeric(meanreaches)
schedule<- reachdata$distortion
}
#this function will take the dataframe made in the last function (dogridsearch) and use the list of parameters to make a new model then compare to output and get a new mse.
pargrid <- gridsearch(localizations, schedule, nsteps = 7, topn = 4)
for (gridpoint in c(1:nrow(pargrid))) { #for each row
par<-unlist(pargrid[gridpoint,1])
control <- list('maxit'=10000, 'ndeps'=1e-9 )
fit <- optim(par=par, PropModelMSE, gr=NULL, schedule, localizations, control=control, method = "Brent", lower = 0, upper = 1)
optpar<- fit$par
# stick optpar back in pargrid
pargrid[gridpoint,1] <- optpar
pargrid[gridpoint,2]<- fit$value
}
# get lowest MSE, and pars that go with that
bestpar <- order(pargrid[,2])[1]
print(unlist(pargrid[bestpar]))
output<- PropModel(unlist(pargrid[bestpar]), schedule)
output == apm
output
apm
lines(apm, col = "red")
source('E:/Jenn/Documents/VisualFeedback/R/Analysis_Scripts.R', encoding = 'UTF-8')
localizations<-rowMeans(locadata[,2:ncol(locadata)], na.rm=TRUE)
if (exp == 2){
meanreaches<-rowMeans(reachdata[,2:ncol(reachdata)], na.rm=TRUE)
distortion<- c(rep(0, 64), rep(30, 160), rep (-30,16))
schedule<- c(distortion,meanreaches)
} else {
meanreaches<-rowMeans(reachdata[241:288,2:ncol(reachdata)], na.rm=TRUE)
meanreaches<- meanreaches*-1
reachdata$distortion[241:288]<- as.numeric(meanreaches)
schedule<- reachdata$distortion
}
#this function will take the dataframe made in the last function (dogridsearch) and use the list of parameters to make a new model then compare to output and get a new mse.
pargrid <- gridsearch(localizations, schedule, nsteps = 7, topn = 4)
cat('optimize best fits...\n')
for (gridpoint in c(1:nrow(pargrid))) { #for each row
par<-unlist(pargrid[gridpoint,1])
control <- list('maxit'=10000, 'ndeps'=1e-9 )
fit <- optim(par=par, PropModelMSE, gr=NULL, schedule, localizations, control=control, method = "Brent", lower = 0, upper = 1)
optpar<- fit$par
# stick optpar back in pargrid
pargrid[gridpoint,1] <- optpar
pargrid[gridpoint,2]<- fit$value
}
# get lowest MSE, and pars that go with that
bestpar <- order(pargrid[,2])[1]
print(unlist(pargrid[bestpar]))
plotfitPropModel(active_reaches, active_localization, colorA, "Active")
lines(apm, col = "green")
plotpropmodels()
setwd("E:/Jenn/Documents/VisualFeedback")
setwd("E:/Jenn/Documents/VisualFeedback/R")
setwd("E:/Jenn/Documents/VisualFeedback")
svglite(file='figs/MLMC_2020 fig 2.svg', width=15, height=10,pointsize = 13, system_fonts=list(sans = "Arial"))
library(svglite)
svglite(file='figs/MLMC_2020 fig 2.svg', width=15, height=10,pointsize = 13, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,1,2,2,3,3,4,4,5,6,0,0), nrow=2, byrow=TRUE) )
layout(matrix(c(1,1,2,2,3,3,4,4,5,6,0,0), nrow=2, byrow=TRUE) )
Reachmodel(data = active_reaches, name =  "Active", condition = "loc", loc_data = active_localization, color = colorA)
Reachmodel(data = passive_reaches, name =  "Passive", condition = "loc", loc_data = passive_localization, color = colorPA)
Reachmodel(data = terminal_reaches, name =  "Terminal", condition = "loc", loc_data = terminal_localization, color = colorT)
ExposureDatas(exposure_localization, exposure_reaches)
plotpropmodels()
dev.off()
svglite(file='figs/MLMC_2020 fig 2.svg', width=15, height=8,pointsize = 13, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,1,2,2,3,3,4,4,5,5,0,0), nrow=2, byrow=TRUE) )
Reachmodel(data = active_reaches, name =  "Active", condition = "loc", loc_data = active_localization, color = colorA)
Reachmodel(data = passive_reaches, name =  "Passive", condition = "loc", loc_data = passive_localization, color = colorPA)
Reachmodel(data = terminal_reaches, name =  "Terminal", condition = "loc", loc_data = terminal_localization, color = colorT)
ExposureDatas(exposure_localization, exposure_reaches)
plotpropmodels()
dev.off()
svglite(file='figs/MLMC_2020 fig 3.svg', width=15, height=10,pointsize = 13, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,1,2,2,3,3,4,4,5,6,0,0), nrow=2, byrow=TRUE) )
Reachmodel(data = newnocursor_reaches, name =  "No-Cursor", condition = "nc", ncdata = newnocursor_nocursors, color = colorNC)
Reachmodel(data = newnocursor_reaches, name =  "No-Cursor", condition = "nc", ncdata = newnocursor_nocursors, color = colorNC)
Reachmodel(data = newnocursor_reaches, name =  "No-Cursor", condition = "nc", ncdata = newnocursor_nocursors, color = colorNC)
Reachmodel(data = newnocursor_reaches, name =  "No-Cursor", condition = "nc", ncdata = newnocursor_nocursors, color = colorNC)
Reachmodel(data = newnocursor_reaches, name =  "No-Cursor", condition = "nc", ncdata = newnocursor_nocursors, color = colorNC)
dev.off()
svglite(file='figs/MLMC_2020 fig 2.svg', width=10, height=6,pointsize = 13, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,1,2,2,3,3,4,4,5,5,0,0), nrow=2, byrow=TRUE) )
Reachmodel(data = active_reaches, name =  "Active", condition = "loc", loc_data = active_localization, color = colorA)
Reachmodel(data = passive_reaches, name =  "Passive", condition = "loc", loc_data = passive_localization, color = colorPA)
Reachmodel(data = terminal_reaches, name =  "Terminal", condition = "loc", loc_data = terminal_localization, color = colorT)
ExposureDatas(exposure_localization, exposure_reaches)
plotpropmodels()
dev.off()
svglite(file='figs/MLMC_2020 fig 2.svg', width=13, height=8,pointsize = 13, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,1,2,2,3,3,4,4,5,5,0,0), nrow=2, byrow=TRUE) )
Reachmodel(data = active_reaches, name =  "Active", condition = "loc", loc_data = active_localization, color = colorA)
Reachmodel(data = passive_reaches, name =  "Passive", condition = "loc", loc_data = passive_localization, color = colorPA)
Reachmodel(data = terminal_reaches, name =  "Terminal", condition = "loc", loc_data = terminal_localization, color = colorT)
ExposureDatas(exposure_localization, exposure_reaches)
plotpropmodels()
dev.off()
svglite(file='figs/MLMC_2020 fig 2.svg', width=15, height=6,pointsize = 13, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,1,2,2,3,3,4,4,5,5,0,0), nrow=2, byrow=TRUE) )
Reachmodel(data = active_reaches, name =  "Active", condition = "loc", loc_data = active_localization, color = colorA)
Reachmodel(data = passive_reaches, name =  "Passive", condition = "loc", loc_data = passive_localization, color = colorPA)
Reachmodel(data = terminal_reaches, name =  "Terminal", condition = "loc", loc_data = terminal_localization, color = colorT)
ExposureDatas(exposure_localization, exposure_reaches)
plotpropmodels()
dev.off()
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
svglite(file='figs/MLMC_2020 fig 2.svg', width=15, height=6,pointsize = 13, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,1,2,2,3,3,4,4,5,5,0,0), nrow=2, byrow=TRUE) )
Reachmodel(data = active_reaches, name =  "Active", condition = "loc", loc_data = active_localization, color = colorA)
Reachmodel(data = passive_reaches, name =  "Passive", condition = "loc", loc_data = passive_localization, color = colorPA)
Reachmodel(data = terminal_reaches, name =  "Terminal", condition = "loc", loc_data = terminal_localization, color = colorT)
ExposureDatas(exposure_localization, exposure_reaches)
plotpropmodels()
dev.off()
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
svglite(file='figs/MLMC_2020 fig 2.svg', width=15, height=6,pointsize = 13, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,1,2,2,3,3,4,4,5,5,0,0), nrow=2, byrow=TRUE) )
Reachmodel(data = active_reaches, name =  "Active", condition = "loc", loc_data = active_localization, color = colorA)
Reachmodel(data = passive_reaches, name =  "Passive", condition = "loc", loc_data = passive_localization, color = colorPA)
Reachmodel(data = terminal_reaches, name =  "Terminal", condition = "loc", loc_data = terminal_localization, color = colorT)
ExposureDatas(exposure_localization, exposure_reaches)
plotpropmodels()
dev.off()
svglite(file='doc/MLMC fig 2_test.svg', width=15, height=10,pointsize = 13, system_fonts=list(sans = "Arial"))
svglite(file='figs/MLMC fig 2_test.svg', width=15, height=10,pointsize = 13, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,2,3,4), nrow=2, byrow=TRUE), heights=c(1,1))
Reachmodel(data = active_reaches, name =  "Active", condition = "loc", loc_data = active_localization, color = colorA)
Reachmodel(data = passive_reaches, name =  "Passive", condition = "loc", loc_data = passive_localization, color = colorPA)
ExposureDatas(exposure_localization, exposure_reaches)
plotpropmodels()
dev.off()
svglite(file='figs/MLMC_2020 fig 2.svg', width=12, height=10,pointsize = 13, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,1,2,2,3,3,4,4,5,5,0,0), nrow=2, byrow=TRUE) )
Reachmodel(data = active_reaches, name =  "Active", condition = "loc", loc_data = active_localization, color = colorA)
Reachmodel(data = passive_reaches, name =  "Passive", condition = "loc", loc_data = passive_localization, color = colorPA)
Reachmodel(data = terminal_reaches, name =  "Terminal", condition = "loc", loc_data = terminal_localization, color = colorT)
ExposureDatas(exposure_localization, exposure_reaches)
plotpropmodels()
dev.off()
svglite(file='figs/MLMC_2020 fig 2.svg', width=15, height=8,pointsize = 13, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,1,2,2,3,3,4,4,5,5,0,0), nrow=2, byrow=TRUE) )
Reachmodel(data = active_reaches, name =  "Active", condition = "loc", loc_data = active_localization, color = colorA)
Reachmodel(data = passive_reaches, name =  "Passive", condition = "loc", loc_data = passive_localization, color = colorPA)
Reachmodel(data = terminal_reaches, name =  "Terminal", condition = "loc", loc_data = terminal_localization, color = colorT)
ExposureDatas(exposure_localization, exposure_reaches)
plotpropmodels()
dev.off()
GroupModelAICs(terminal_reaches)
svglite(file='figs/MLMC_2020 fig 2.svg', width=15, height=10,pointsize = 13, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,1,2,2,3,3,4,4,5,5,0,0), nrow=2, byrow=TRUE) )
Reachmodel(data = active_reaches, name =  "Active", condition = "loc", loc_data = active_localization, color = colorA)
Reachmodel(data = passive_reaches, name =  "Passive", condition = "loc", loc_data = passive_localization, color = colorPA)
Reachmodel(data = terminal_reaches, name =  "Terminal", condition = "loc", loc_data = terminal_localization, color = colorT)
ExposureDatas(exposure_localization, exposure_reaches)
plotpropmodels()
dev.off()
svglite(file='figs/MLMC_2020 fig 2.svg', width=15, height=10,pointsize = 8, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,1,2,2,3,3,4,4,5,5,0,0), nrow=2, byrow=TRUE) )
Reachmodel(data = active_reaches, name =  "Active", condition = "loc", loc_data = active_localization, color = colorA)
Reachmodel(data = passive_reaches, name =  "Passive", condition = "loc", loc_data = passive_localization, color = colorPA)
Reachmodel(data = terminal_reaches, name =  "Terminal", condition = "loc", loc_data = terminal_localization, color = colorT)
ExposureDatas(exposure_localization, exposure_reaches)
plotpropmodels()
dev.off()
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
svglite(file='figs/MLMC_2020 fig 2.svg', width=15, height=10,pointsize = 8, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,1,2,2,3,3,4,4,5,5,0,0), nrow=2, byrow=TRUE) )
Reachmodel(data = active_reaches, name =  "Active", condition = "loc", loc_data = active_localization, color = colorA)
Reachmodel(data = passive_reaches, name =  "Passive", condition = "loc", loc_data = passive_localization, color = colorPA)
Reachmodel(data = terminal_reaches, name =  "Terminal", condition = "loc", loc_data = terminal_localization, color = colorT)
ExposureDatas(exposure_localization, exposure_reaches)
plotpropmodels()
dev.off()
svglite(file='figs/MLMC_2020 fig 2.svg', width=15, height=8,pointsize = 8, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,1,2,2,3,3,4,4,5,5,0,0), nrow=2, byrow=TRUE) )
Reachmodel(data = active_reaches, name =  "Active", condition = "loc", loc_data = active_localization, color = colorA)
Reachmodel(data = passive_reaches, name =  "Passive", condition = "loc", loc_data = passive_localization, color = colorPA)
Reachmodel(data = terminal_reaches, name =  "Terminal", condition = "loc", loc_data = terminal_localization, color = colorT)
ExposureDatas(exposure_localization, exposure_reaches)
plotpropmodels()
dev.off()
svglite(file='figs/MLMC_2020 fig 2.svg', width=15, height=6,pointsize = 8, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,1,2,2,3,3,4,4,5,5,0,0), nrow=2, byrow=TRUE) )
Reachmodel(data = active_reaches, name =  "Active", condition = "loc", loc_data = active_localization, color = colorA)
Reachmodel(data = passive_reaches, name =  "Passive", condition = "loc", loc_data = passive_localization, color = colorPA)
Reachmodel(data = terminal_reaches, name =  "Terminal", condition = "loc", loc_data = terminal_localization, color = colorT)
ExposureDatas(exposure_localization, exposure_reaches)
plotpropmodels()
dev.off()
svglite(file='figs/MLMC_2020 fig 2.svg', width=15, height=6,pointsize =13, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,1,2,2,3,3,4,4,5,5,0,0), nrow=2, byrow=TRUE) )
Reachmodel(data = active_reaches, name =  "Active", condition = "loc", loc_data = active_localization, color = colorA)
Reachmodel(data = passive_reaches, name =  "Passive", condition = "loc", loc_data = passive_localization, color = colorPA)
Reachmodel(data = terminal_reaches, name =  "Terminal", condition = "loc", loc_data = terminal_localization, color = colorT)
ExposureDatas(exposure_localization, exposure_reaches)
plotpropmodels()
dev.off()
svglite(file='figs/MLMC_2020 fig 2.svg', width=13, height=6,pointsize =13, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,1,2,2,3,3,4,4,5,5,0,0), nrow=2, byrow=TRUE) )
Reachmodel(data = active_reaches, name =  "Active", condition = "loc", loc_data = active_localization, color = colorA)
Reachmodel(data = passive_reaches, name =  "Passive", condition = "loc", loc_data = passive_localization, color = colorPA)
Reachmodel(data = terminal_reaches, name =  "Terminal", condition = "loc", loc_data = terminal_localization, color = colorT)
ExposureDatas(exposure_localization, exposure_reaches)
plotpropmodels()
dev.off()
svglite(file='figs/MLMC_2020 fig 2.svg', width=15, height=6,pointsize =13, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,1,2,2,3,3,4,4,5,5,0,0), nrow=2, byrow=TRUE) )
Reachmodel(data = active_reaches, name =  "Active", condition = "loc", loc_data = active_localization, color = colorA)
Reachmodel(data = passive_reaches, name =  "Passive", condition = "loc", loc_data = passive_localization, color = colorPA)
Reachmodel(data = terminal_reaches, name =  "Terminal", condition = "loc", loc_data = terminal_localization, color = colorT)
ExposureDatas(exposure_localization, exposure_reaches)
plotpropmodels()
dev.off()
svglite(file='figs/MLMC_2020 fig 2.svg', width=15, height=8,pointsize =13, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,1,2,2,3,3,4,4,5,5,0,0), nrow=2, byrow=TRUE) )
Reachmodel(data = active_reaches, name =  "Active", condition = "loc", loc_data = active_localization, color = colorA)
Reachmodel(data = passive_reaches, name =  "Passive", condition = "loc", loc_data = passive_localization, color = colorPA)
Reachmodel(data = terminal_reaches, name =  "Terminal", condition = "loc", loc_data = terminal_localization, color = colorT)
ExposureDatas(exposure_localization, exposure_reaches)
plotpropmodels()
dev.off()
source('E:/Jenn/Documents/VisualFeedback/R/Analysis_Scripts.R', encoding = 'UTF-8')
fi3outLine(nocursor_reaches,1:6, 1:2, ' Reach Aftereffects', nocursorI_reaches, grid = 'skewed', nocursor_nocursors, nocursorI_nocursors)
MLMCfig3 <- function (acd,ncd_NC, ncdI) {
fig3outLine(acd, 4:5, 4:5, "Reach Aftereffects")
PlotData(ncd_NC, 4, 4, x =  c(c(33:288), rev(c(33:288))))
PlotData(ncdI, 5, 5, x =  c(c(33:288), rev(c(33:288))))
}
fi3outLine(nocursor_reaches,exp = 1:6, color = 1:2, ' Reach Aftereffects', nocursorI_reaches, grid = 'skewed', nocursor_nocursors, nocursorI_nocursors)
library(RateRate)
fi3outLine(nocursor_reaches,exp = 1:6, color = 1:2, ' Reach Aftereffects', nocursorI_reaches, grid = 'skewed', nocursor_nocursors, nocursorI_nocursors)
fi3outLine <- function(dataset1, exp, color,title, dataset2, grid, ncdata1, ncdata2) {
labels <-
list (
'RAE (N=32)',
'RAE-I(N=16)',
'No Cursor data',
'model','fast', "slow"
)
translist <-
c(colorNC_trans,
colorNNC_trans)
colorlist <- list(colorNC, colorNNC)
label <- labels[exp]
colors <- colorlist[color]
dataCIs1 <- trialCI(data = dataset1)
dataCIs2 <- trialCI(data = dataset2)
dataset1["distortion"][is.na(dataset1["distortion"])] <- 0
dataset1$Mean <-
rowMeans(dataset1[, 2:length(dataset1)], na.rm = TRUE)
plot(
dataset1$Mean,
ylim = c(-35, 35),
xlab = "Trial",
ylab = "Hand Direction [°]",
axes = F,
main = title,
type = 'l',
col = 'white',
cex.lab = 1.5,
cex.main = 1.5
)
lines(c(1, 64, 64, 224, 224, 240, 240),
c(0, 0, 30, 30, -30, -30, 0),
col = rgb(0., 0., 0.))
lines(c(240, 288),
c(0, 0),
lty = 2,
col = rgb(0., 0., 0.))
legend(
-10,
0,
legend = c(label),
col = c(unlist(colors), 'black', 'black', 'black', 'black'),
lty = c(1,1,1,4,3,2),
lwd = c(2),
bty = 'n',
cex = 1.5
)
axis(2, at = c(-30, -15, 0, 15, 30), cex.axis = 1.5,
las = 2)
axis(1, at = c(1, 64, 224, 240, 288), cex.axis = 1.5, las = 2)
PlotData(nocursor_reaches[33:320,], 3, 3)
PlotData(nocursorI_reaches[33:320,], 4, 4)
grid <- grid
reaches <- getreachesformodel(dataset1[33:320,])
reach_par <-
fitTwoRateReachModel(
reaches = reaches$meanreaches,
schedule = reaches$distortion,
oneTwoRates = 2,
grid = grid,
checkStability = TRUE
)
reach_model <-
twoRateReachModel(par = reach_par, schedule = reaches$distortion)
lines(reach_model$total * -1, col = unlist(colors[1]),lty = 4)
lines(reach_model$slow * -1, col = unlist(colors[1]),lty = 2)
lines(reach_model$fast * -1, col = unlist(colors[1]),lty = 3)
ncreaches <- getreachesformodel(ncdata1)
lines(x = 33:288, y = ncreaches$meanreaches * -1, col = colorNC)
reaches <- getreachesformodel(dataset2[33:320,])
reach_par <-
fitTwoRateReachModel(
reaches = reaches$meanreaches,
schedule = reaches$distortion,
oneTwoRates = 2,
grid = grid,
checkStability = TRUE
)
reach_model <-
twoRateReachModel(par = reach_par, schedule = reaches$distortion)
lines(reach_model$total * -1, col = unlist(colors[2]),lty = 4)
lines(reach_model$slow * -1, col = unlist(colors[2]),lty = 2)
lines(reach_model$fast * -1, col = unlist(colors[2]),lty = 3)
ncreaches <- getreachesformodel(ncdata2)
lines(x = 33:288, y = ncreaches$meanreaches * -1, col = colorNNC)
}
trialCI <- function(data) {
AllCIs <- data.frame()
for (trial in 1:nrow(data)) {
y <- unlist(data[trial, 2:length(data)])
CItrial <- t.interval(unlist(y))
if (prod(dim(AllCIs)) == 0) {
AllCIs <- CItrial
} else {
AllCIs <- rbind(AllCIs, CItrial)
}
}
return(AllCIs)
}
t.interval = function(data,
variance = var(data, na.rm = TRUE),
conf.level = 0.95) {
z = qt((1 - conf.level) / 2,
df = length(data) - 1,
lower.tail = FALSE)
xbar = mean(data, na.rm = TRUE)
sdx = sqrt(variance / length(data))
return(c(xbar - z * sdx, xbar + z * sdx))
}
fi3outLine(nocursor_reaches,exp = 1:6, color = 1:2, ' Reach Aftereffects', nocursorI_reaches, grid = 'skewed', nocursor_nocursors, nocursorI_nocursors)
svglite(file='doc/MLMCnocursor.svg', width=17, height=10,pointsize = 13, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,1,2,2,0,0,3,3,4,4,5,6), nrow=2, byrow=TRUE) )
fi3outLine(nocursor_reaches,exp = 1:6, color = 1:2, ' Reach Aftereffects', nocursorI_reaches, grid = 'skewed', nocursor_nocursors, nocursorI_nocursors)
dev.off()
library(svglite)
svglite(file='doc/MLMCnocursor.svg', width=17, height=10,pointsize = 13, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,1,2,2,0,0,3,3,4,4,5,6), nrow=2, byrow=TRUE) )
fi3outLine(nocursor_reaches,exp = 1:6, color = 1:2, ' Reach Aftereffects', nocursorI_reaches, grid = 'skewed', nocursor_nocursors, nocursorI_nocursors)
dev.off()
svglite(file='figs/MLMCnocursor_2020.svg', width=17, height=10,pointsize = 13, system_fonts=list(sans = "Arial"))
layout(matrix(c(1,1,2,2,0,0,3,3,4,4,5,6), nrow=2, byrow=TRUE) )
fi3outLine(nocursor_reaches,exp = 1:6, color = 1:2, ' Reach Aftereffects', nocursorI_reaches, grid = 'skewed', nocursor_nocursors, nocursorI_nocursors)
dev.off()
loadalldata()
loadcolors()
neuromatchReaches()
library(RateRate)
neuromatchReaches()
source('E:/Jenn/Documents/VisualFeedback/R/Plots.R', encoding = 'UTF-8')
neuromatchReaches()
svglite('figs/neuromatch3_reaches.svg', width = 8, height = 25, system_fonts=list(sans = "Arial"))
library(svglite)
svglite('figs/neuromatch3_reaches.svg', width = 8, height = 25, system_fonts=list(sans = "Arial"))
neuromatchReaches()
dev.off()
svglite('figs/neuromatch3_reaches.svg', width = 8, height = 5, system_fonts=list(sans = "Arial"))
neuromatchReaches()
dev.off()
